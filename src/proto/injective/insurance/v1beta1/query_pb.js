// source: injective/insurance/v1beta1/query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var injective_insurance_v1beta1_insurance_pb = require('../../../injective/insurance/v1beta1/insurance_pb.js');
goog.object.extend(proto, injective_insurance_v1beta1_insurance_pb);
var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cosmos_base_v1beta1_coin_pb = require('../../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var injective_insurance_v1beta1_genesis_pb = require('../../../injective/insurance/v1beta1/genesis_pb.js');
goog.object.extend(proto, injective_insurance_v1beta1_genesis_pb);
goog.exportSymbol('proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest', null, global);
goog.exportSymbol('proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse', null, global);
goog.exportSymbol('proto.injective.insurance.v1beta1.QueryInsuranceFundRequest', null, global);
goog.exportSymbol('proto.injective.insurance.v1beta1.QueryInsuranceFundResponse', null, global);
goog.exportSymbol('proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest', null, global);
goog.exportSymbol('proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse', null, global);
goog.exportSymbol('proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest', null, global);
goog.exportSymbol('proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse', null, global);
goog.exportSymbol('proto.injective.insurance.v1beta1.QueryModuleStateRequest', null, global);
goog.exportSymbol('proto.injective.insurance.v1beta1.QueryModuleStateResponse', null, global);
goog.exportSymbol('proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest', null, global);
goog.exportSymbol('proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest.displayName = 'proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.displayName = 'proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.insurance.v1beta1.QueryInsuranceFundRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.insurance.v1beta1.QueryInsuranceFundRequest.displayName = 'proto.injective.insurance.v1beta1.QueryInsuranceFundRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.insurance.v1beta1.QueryInsuranceFundResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.displayName = 'proto.injective.insurance.v1beta1.QueryInsuranceFundResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest.displayName = 'proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.displayName = 'proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.displayName = 'proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.displayName = 'proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.displayName = 'proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.displayName = 'proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.insurance.v1beta1.QueryModuleStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.insurance.v1beta1.QueryModuleStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.insurance.v1beta1.QueryModuleStateRequest.displayName = 'proto.injective.insurance.v1beta1.QueryModuleStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.insurance.v1beta1.QueryModuleStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.insurance.v1beta1.QueryModuleStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.insurance.v1beta1.QueryModuleStateResponse.displayName = 'proto.injective.insurance.v1beta1.QueryModuleStateResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest}
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest;
  return proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest}
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: (f = msg.getParams()) && injective_insurance_v1beta1_insurance_pb.Params.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse}
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse;
  return proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse}
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_insurance_v1beta1_insurance_pb.Params;
      reader.readMessage(value,injective_insurance_v1beta1_insurance_pb.Params.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      injective_insurance_v1beta1_insurance_pb.Params.serializeBinaryToWriter
    );
  }
};


/**
 * optional Params params = 1;
 * @return {?proto.injective.insurance.v1beta1.Params}
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.prototype.getParams = function() {
  return /** @type{?proto.injective.insurance.v1beta1.Params} */ (
    jspb.Message.getWrapperField(this, injective_insurance_v1beta1_insurance_pb.Params, 1));
};


/**
 * @param {?proto.injective.insurance.v1beta1.Params|undefined} value
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse} returns this
*/
proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse} returns this
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.insurance.v1beta1.QueryInsuranceParamsResponse.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.insurance.v1beta1.QueryInsuranceFundRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceFundRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceFundRequest}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.insurance.v1beta1.QueryInsuranceFundRequest;
  return proto.injective.insurance.v1beta1.QueryInsuranceFundRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceFundRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceFundRequest}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.insurance.v1beta1.QueryInsuranceFundRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceFundRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceFundRequest} returns this
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceFundResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fund: (f = msg.getFund()) && injective_insurance_v1beta1_insurance_pb.InsuranceFund.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceFundResponse}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.insurance.v1beta1.QueryInsuranceFundResponse;
  return proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceFundResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceFundResponse}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_insurance_v1beta1_insurance_pb.InsuranceFund;
      reader.readMessage(value,injective_insurance_v1beta1_insurance_pb.InsuranceFund.deserializeBinaryFromReader);
      msg.setFund(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceFundResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFund();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      injective_insurance_v1beta1_insurance_pb.InsuranceFund.serializeBinaryToWriter
    );
  }
};


/**
 * optional InsuranceFund fund = 1;
 * @return {?proto.injective.insurance.v1beta1.InsuranceFund}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.prototype.getFund = function() {
  return /** @type{?proto.injective.insurance.v1beta1.InsuranceFund} */ (
    jspb.Message.getWrapperField(this, injective_insurance_v1beta1_insurance_pb.InsuranceFund, 1));
};


/**
 * @param {?proto.injective.insurance.v1beta1.InsuranceFund|undefined} value
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceFundResponse} returns this
*/
proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.prototype.setFund = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceFundResponse} returns this
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.prototype.clearFund = function() {
  return this.setFund(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundResponse.prototype.hasFund = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest;
  return proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fundsList: jspb.Message.toObjectList(msg.getFundsList(),
    injective_insurance_v1beta1_insurance_pb.InsuranceFund.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse;
  return proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_insurance_v1beta1_insurance_pb.InsuranceFund;
      reader.readMessage(value,injective_insurance_v1beta1_insurance_pb.InsuranceFund.deserializeBinaryFromReader);
      msg.addFunds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFundsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      injective_insurance_v1beta1_insurance_pb.InsuranceFund.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InsuranceFund funds = 1;
 * @return {!Array<!proto.injective.insurance.v1beta1.InsuranceFund>}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.prototype.getFundsList = function() {
  return /** @type{!Array<!proto.injective.insurance.v1beta1.InsuranceFund>} */ (
    jspb.Message.getRepeatedWrapperField(this, injective_insurance_v1beta1_insurance_pb.InsuranceFund, 1));
};


/**
 * @param {!Array<!proto.injective.insurance.v1beta1.InsuranceFund>} value
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse} returns this
*/
proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.prototype.setFundsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective.insurance.v1beta1.InsuranceFund=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.insurance.v1beta1.InsuranceFund}
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.prototype.addFunds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective.insurance.v1beta1.InsuranceFund, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse} returns this
 */
proto.injective.insurance.v1beta1.QueryInsuranceFundsResponse.prototype.clearFundsList = function() {
  return this.setFundsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest}
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest;
  return proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest}
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string marketId = 1;
 * @return {string}
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.prototype.getMarketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest} returns this
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest} returns this
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountList: jspb.Message.toObjectList(msg.getAmountList(),
    cosmos_base_v1beta1_coin_pb.Coin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse}
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse;
  return proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse}
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * repeated cosmos.base.v1beta1.Coin amount = 1;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.prototype.getAmountList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 1));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse} returns this
*/
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.prototype.setAmountList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.prototype.addAmount = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse} returns this
 */
proto.injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.prototype.clearAmountList = function() {
  return this.setAmountList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest}
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest;
  return proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest}
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string marketId = 1;
 * @return {string}
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.prototype.getMarketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest} returns this
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.prototype.setMarketid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest} returns this
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountList: jspb.Message.toObjectList(msg.getAmountList(),
    cosmos_base_v1beta1_coin_pb.Coin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse}
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse;
  return proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse}
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * repeated cosmos.base.v1beta1.Coin amount = 1;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.prototype.getAmountList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 1));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse} returns this
*/
proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.prototype.setAmountList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.prototype.addAmount = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse} returns this
 */
proto.injective.insurance.v1beta1.QueryPendingRedemptionsResponse.prototype.clearAmountList = function() {
  return this.setAmountList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.insurance.v1beta1.QueryModuleStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.insurance.v1beta1.QueryModuleStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.insurance.v1beta1.QueryModuleStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryModuleStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.insurance.v1beta1.QueryModuleStateRequest}
 */
proto.injective.insurance.v1beta1.QueryModuleStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.insurance.v1beta1.QueryModuleStateRequest;
  return proto.injective.insurance.v1beta1.QueryModuleStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.insurance.v1beta1.QueryModuleStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.insurance.v1beta1.QueryModuleStateRequest}
 */
proto.injective.insurance.v1beta1.QueryModuleStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.insurance.v1beta1.QueryModuleStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.insurance.v1beta1.QueryModuleStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.insurance.v1beta1.QueryModuleStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryModuleStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.insurance.v1beta1.QueryModuleStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.insurance.v1beta1.QueryModuleStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.insurance.v1beta1.QueryModuleStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryModuleStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && injective_insurance_v1beta1_genesis_pb.GenesisState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.insurance.v1beta1.QueryModuleStateResponse}
 */
proto.injective.insurance.v1beta1.QueryModuleStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.insurance.v1beta1.QueryModuleStateResponse;
  return proto.injective.insurance.v1beta1.QueryModuleStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.insurance.v1beta1.QueryModuleStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.insurance.v1beta1.QueryModuleStateResponse}
 */
proto.injective.insurance.v1beta1.QueryModuleStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_insurance_v1beta1_genesis_pb.GenesisState;
      reader.readMessage(value,injective_insurance_v1beta1_genesis_pb.GenesisState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.insurance.v1beta1.QueryModuleStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.insurance.v1beta1.QueryModuleStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.insurance.v1beta1.QueryModuleStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.insurance.v1beta1.QueryModuleStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      injective_insurance_v1beta1_genesis_pb.GenesisState.serializeBinaryToWriter
    );
  }
};


/**
 * optional GenesisState state = 1;
 * @return {?proto.injective.insurance.v1beta1.GenesisState}
 */
proto.injective.insurance.v1beta1.QueryModuleStateResponse.prototype.getState = function() {
  return /** @type{?proto.injective.insurance.v1beta1.GenesisState} */ (
    jspb.Message.getWrapperField(this, injective_insurance_v1beta1_genesis_pb.GenesisState, 1));
};


/**
 * @param {?proto.injective.insurance.v1beta1.GenesisState|undefined} value
 * @return {!proto.injective.insurance.v1beta1.QueryModuleStateResponse} returns this
*/
proto.injective.insurance.v1beta1.QueryModuleStateResponse.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.insurance.v1beta1.QueryModuleStateResponse} returns this
 */
proto.injective.insurance.v1beta1.QueryModuleStateResponse.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.insurance.v1beta1.QueryModuleStateResponse.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.injective.insurance.v1beta1);
