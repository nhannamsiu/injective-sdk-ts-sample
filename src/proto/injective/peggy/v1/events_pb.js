// source: injective/peggy/v1/events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var injective_peggy_v1_attestation_pb = require('../../../injective/peggy/v1/attestation_pb.js');
goog.object.extend(proto, injective_peggy_v1_attestation_pb);
goog.exportSymbol('proto.injective.peggy.v1.EventAttestationObserved', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventBridgeWithdrawCanceled', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventBridgeWithdrawalReceived', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventCancelSendToEth', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventConfirmBatch', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventDepositClaim', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventERC20DeployedClaim', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventMultisigUpdateRequest', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventOutgoingBatch', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventOutgoingBatchCanceled', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventRequestBatch', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventSendToEth', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventSetOrchestratorAddresses', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventSubmitBadSignatureEvidence', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventValsetConfirm', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventValsetUpdateClaim', null, global);
goog.exportSymbol('proto.injective.peggy.v1.EventWithdrawClaim', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventAttestationObserved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventAttestationObserved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventAttestationObserved.displayName = 'proto.injective.peggy.v1.EventAttestationObserved';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventBridgeWithdrawCanceled = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventBridgeWithdrawCanceled, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventBridgeWithdrawCanceled.displayName = 'proto.injective.peggy.v1.EventBridgeWithdrawCanceled';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventBridgeWithdrawalReceived, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventBridgeWithdrawalReceived.displayName = 'proto.injective.peggy.v1.EventBridgeWithdrawalReceived';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventOutgoingBatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventOutgoingBatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventOutgoingBatch.displayName = 'proto.injective.peggy.v1.EventOutgoingBatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventOutgoingBatchCanceled, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventOutgoingBatchCanceled.displayName = 'proto.injective.peggy.v1.EventOutgoingBatchCanceled';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventMultisigUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventMultisigUpdateRequest.displayName = 'proto.injective.peggy.v1.EventMultisigUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventSetOrchestratorAddresses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventSetOrchestratorAddresses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventSetOrchestratorAddresses.displayName = 'proto.injective.peggy.v1.EventSetOrchestratorAddresses';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventValsetConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventValsetConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventValsetConfirm.displayName = 'proto.injective.peggy.v1.EventValsetConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventSendToEth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventSendToEth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventSendToEth.displayName = 'proto.injective.peggy.v1.EventSendToEth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventRequestBatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventRequestBatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventRequestBatch.displayName = 'proto.injective.peggy.v1.EventRequestBatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventConfirmBatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventConfirmBatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventConfirmBatch.displayName = 'proto.injective.peggy.v1.EventConfirmBatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventDepositClaim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventDepositClaim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventDepositClaim.displayName = 'proto.injective.peggy.v1.EventDepositClaim';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventWithdrawClaim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventWithdrawClaim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventWithdrawClaim.displayName = 'proto.injective.peggy.v1.EventWithdrawClaim';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventERC20DeployedClaim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventERC20DeployedClaim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventERC20DeployedClaim.displayName = 'proto.injective.peggy.v1.EventERC20DeployedClaim';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventValsetUpdateClaim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventValsetUpdateClaim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventValsetUpdateClaim.displayName = 'proto.injective.peggy.v1.EventValsetUpdateClaim';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventCancelSendToEth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventCancelSendToEth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventCancelSendToEth.displayName = 'proto.injective.peggy.v1.EventCancelSendToEth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.EventSubmitBadSignatureEvidence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.EventSubmitBadSignatureEvidence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.displayName = 'proto.injective.peggy.v1.EventSubmitBadSignatureEvidence';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventAttestationObserved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventAttestationObserved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventAttestationObserved.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bridgeContract: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bridgeChainId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    attestationId: msg.getAttestationId_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventAttestationObserved}
 */
proto.injective.peggy.v1.EventAttestationObserved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventAttestationObserved;
  return proto.injective.peggy.v1.EventAttestationObserved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventAttestationObserved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventAttestationObserved}
 */
proto.injective.peggy.v1.EventAttestationObserved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.injective.peggy.v1.ClaimType} */ (reader.readEnum());
      msg.setAttestationType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBridgeContract(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBridgeChainId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventAttestationObserved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventAttestationObserved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventAttestationObserved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBridgeContract();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBridgeChainId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional ClaimType attestation_type = 1;
 * @return {!proto.injective.peggy.v1.ClaimType}
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.getAttestationType = function() {
  return /** @type {!proto.injective.peggy.v1.ClaimType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.injective.peggy.v1.ClaimType} value
 * @return {!proto.injective.peggy.v1.EventAttestationObserved} returns this
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.setAttestationType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string bridge_contract = 2;
 * @return {string}
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.getBridgeContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.peggy.v1.EventAttestationObserved} returns this
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.setBridgeContract = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 bridge_chain_id = 3;
 * @return {number}
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.getBridgeChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventAttestationObserved} returns this
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.setBridgeChainId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes attestation_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes attestation_id = 4;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.peggy.v1.EventAttestationObserved} returns this
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 nonce = 5;
 * @return {number}
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventAttestationObserved} returns this
 */
proto.injective.peggy.v1.EventAttestationObserved.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventBridgeWithdrawCanceled.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventBridgeWithdrawCanceled.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventBridgeWithdrawCanceled} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventBridgeWithdrawCanceled.toObject = function(includeInstance, msg) {
  var f, obj = {
    bridgeContract: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bridgeChainId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventBridgeWithdrawCanceled}
 */
proto.injective.peggy.v1.EventBridgeWithdrawCanceled.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventBridgeWithdrawCanceled;
  return proto.injective.peggy.v1.EventBridgeWithdrawCanceled.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventBridgeWithdrawCanceled} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventBridgeWithdrawCanceled}
 */
proto.injective.peggy.v1.EventBridgeWithdrawCanceled.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBridgeContract(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBridgeChainId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventBridgeWithdrawCanceled.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventBridgeWithdrawCanceled.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventBridgeWithdrawCanceled} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventBridgeWithdrawCanceled.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBridgeContract();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBridgeChainId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string bridge_contract = 1;
 * @return {string}
 */
proto.injective.peggy.v1.EventBridgeWithdrawCanceled.prototype.getBridgeContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.peggy.v1.EventBridgeWithdrawCanceled} returns this
 */
proto.injective.peggy.v1.EventBridgeWithdrawCanceled.prototype.setBridgeContract = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 bridge_chain_id = 2;
 * @return {number}
 */
proto.injective.peggy.v1.EventBridgeWithdrawCanceled.prototype.getBridgeChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventBridgeWithdrawCanceled} returns this
 */
proto.injective.peggy.v1.EventBridgeWithdrawCanceled.prototype.setBridgeChainId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventBridgeWithdrawalReceived.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventBridgeWithdrawalReceived} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.toObject = function(includeInstance, msg) {
  var f, obj = {
    bridgeContract: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bridgeChainId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    outgoingTxId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventBridgeWithdrawalReceived}
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventBridgeWithdrawalReceived;
  return proto.injective.peggy.v1.EventBridgeWithdrawalReceived.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventBridgeWithdrawalReceived} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventBridgeWithdrawalReceived}
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBridgeContract(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBridgeChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOutgoingTxId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventBridgeWithdrawalReceived.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventBridgeWithdrawalReceived} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBridgeContract();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBridgeChainId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getOutgoingTxId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string bridge_contract = 1;
 * @return {string}
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.prototype.getBridgeContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.peggy.v1.EventBridgeWithdrawalReceived} returns this
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.prototype.setBridgeContract = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 bridge_chain_id = 2;
 * @return {number}
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.prototype.getBridgeChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventBridgeWithdrawalReceived} returns this
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.prototype.setBridgeChainId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 outgoing_tx_id = 3;
 * @return {number}
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.prototype.getOutgoingTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventBridgeWithdrawalReceived} returns this
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.prototype.setOutgoingTxId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 nonce = 4;
 * @return {number}
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventBridgeWithdrawalReceived} returns this
 */
proto.injective.peggy.v1.EventBridgeWithdrawalReceived.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventOutgoingBatch.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventOutgoingBatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventOutgoingBatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventOutgoingBatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    bridgeContract: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bridgeChainId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    batchId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventOutgoingBatch}
 */
proto.injective.peggy.v1.EventOutgoingBatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventOutgoingBatch;
  return proto.injective.peggy.v1.EventOutgoingBatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventOutgoingBatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventOutgoingBatch}
 */
proto.injective.peggy.v1.EventOutgoingBatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBridgeContract(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBridgeChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBatchId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventOutgoingBatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventOutgoingBatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventOutgoingBatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventOutgoingBatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBridgeContract();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBridgeChainId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBatchId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string bridge_contract = 1;
 * @return {string}
 */
proto.injective.peggy.v1.EventOutgoingBatch.prototype.getBridgeContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.peggy.v1.EventOutgoingBatch} returns this
 */
proto.injective.peggy.v1.EventOutgoingBatch.prototype.setBridgeContract = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 bridge_chain_id = 2;
 * @return {number}
 */
proto.injective.peggy.v1.EventOutgoingBatch.prototype.getBridgeChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventOutgoingBatch} returns this
 */
proto.injective.peggy.v1.EventOutgoingBatch.prototype.setBridgeChainId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 batch_id = 3;
 * @return {number}
 */
proto.injective.peggy.v1.EventOutgoingBatch.prototype.getBatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventOutgoingBatch} returns this
 */
proto.injective.peggy.v1.EventOutgoingBatch.prototype.setBatchId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 nonce = 4;
 * @return {number}
 */
proto.injective.peggy.v1.EventOutgoingBatch.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventOutgoingBatch} returns this
 */
proto.injective.peggy.v1.EventOutgoingBatch.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventOutgoingBatchCanceled.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventOutgoingBatchCanceled} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.toObject = function(includeInstance, msg) {
  var f, obj = {
    bridgeContract: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bridgeChainId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    batchId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventOutgoingBatchCanceled}
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventOutgoingBatchCanceled;
  return proto.injective.peggy.v1.EventOutgoingBatchCanceled.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventOutgoingBatchCanceled} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventOutgoingBatchCanceled}
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBridgeContract(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBridgeChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBatchId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventOutgoingBatchCanceled.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventOutgoingBatchCanceled} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBridgeContract();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBridgeChainId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBatchId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string bridge_contract = 1;
 * @return {string}
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.prototype.getBridgeContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.peggy.v1.EventOutgoingBatchCanceled} returns this
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.prototype.setBridgeContract = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 bridge_chain_id = 2;
 * @return {number}
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.prototype.getBridgeChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventOutgoingBatchCanceled} returns this
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.prototype.setBridgeChainId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 batch_id = 3;
 * @return {number}
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.prototype.getBatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventOutgoingBatchCanceled} returns this
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.prototype.setBatchId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 nonce = 4;
 * @return {number}
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventOutgoingBatchCanceled} returns this
 */
proto.injective.peggy.v1.EventOutgoingBatchCanceled.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventMultisigUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventMultisigUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bridgeContract: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bridgeChainId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    multisigId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventMultisigUpdateRequest}
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventMultisigUpdateRequest;
  return proto.injective.peggy.v1.EventMultisigUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventMultisigUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventMultisigUpdateRequest}
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBridgeContract(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBridgeChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMultisigId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventMultisigUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventMultisigUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBridgeContract();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBridgeChainId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMultisigId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string bridge_contract = 1;
 * @return {string}
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.prototype.getBridgeContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.peggy.v1.EventMultisigUpdateRequest} returns this
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.prototype.setBridgeContract = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 bridge_chain_id = 2;
 * @return {number}
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.prototype.getBridgeChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventMultisigUpdateRequest} returns this
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.prototype.setBridgeChainId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 multisig_id = 3;
 * @return {number}
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.prototype.getMultisigId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventMultisigUpdateRequest} returns this
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.prototype.setMultisigId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 nonce = 4;
 * @return {number}
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventMultisigUpdateRequest} returns this
 */
proto.injective.peggy.v1.EventMultisigUpdateRequest.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventSetOrchestratorAddresses.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventSetOrchestratorAddresses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventSetOrchestratorAddresses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventSetOrchestratorAddresses.toObject = function(includeInstance, msg) {
  var f, obj = {
    setOperatorAddress: msg.getSetOperatorAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventSetOrchestratorAddresses}
 */
proto.injective.peggy.v1.EventSetOrchestratorAddresses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventSetOrchestratorAddresses;
  return proto.injective.peggy.v1.EventSetOrchestratorAddresses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventSetOrchestratorAddresses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventSetOrchestratorAddresses}
 */
proto.injective.peggy.v1.EventSetOrchestratorAddresses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSetOperatorAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventSetOrchestratorAddresses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventSetOrchestratorAddresses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventSetOrchestratorAddresses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventSetOrchestratorAddresses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetOperatorAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes set_operator_address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.injective.peggy.v1.EventSetOrchestratorAddresses.prototype.getSetOperatorAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes set_operator_address = 1;
 * This is a type-conversion wrapper around `getSetOperatorAddress()`
 * @return {string}
 */
proto.injective.peggy.v1.EventSetOrchestratorAddresses.prototype.getSetOperatorAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSetOperatorAddress()));
};


/**
 * optional bytes set_operator_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSetOperatorAddress()`
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventSetOrchestratorAddresses.prototype.getSetOperatorAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSetOperatorAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.peggy.v1.EventSetOrchestratorAddresses} returns this
 */
proto.injective.peggy.v1.EventSetOrchestratorAddresses.prototype.setSetOperatorAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventValsetConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventValsetConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventValsetConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventValsetConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    valsetConfirmKey: msg.getValsetConfirmKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventValsetConfirm}
 */
proto.injective.peggy.v1.EventValsetConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventValsetConfirm;
  return proto.injective.peggy.v1.EventValsetConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventValsetConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventValsetConfirm}
 */
proto.injective.peggy.v1.EventValsetConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValsetConfirmKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventValsetConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventValsetConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventValsetConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventValsetConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValsetConfirmKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes valset_confirm_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.injective.peggy.v1.EventValsetConfirm.prototype.getValsetConfirmKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes valset_confirm_key = 1;
 * This is a type-conversion wrapper around `getValsetConfirmKey()`
 * @return {string}
 */
proto.injective.peggy.v1.EventValsetConfirm.prototype.getValsetConfirmKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValsetConfirmKey()));
};


/**
 * optional bytes valset_confirm_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValsetConfirmKey()`
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventValsetConfirm.prototype.getValsetConfirmKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValsetConfirmKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.peggy.v1.EventValsetConfirm} returns this
 */
proto.injective.peggy.v1.EventValsetConfirm.prototype.setValsetConfirmKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventSendToEth.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventSendToEth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventSendToEth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventSendToEth.toObject = function(includeInstance, msg) {
  var f, obj = {
    outgoingTxId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventSendToEth}
 */
proto.injective.peggy.v1.EventSendToEth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventSendToEth;
  return proto.injective.peggy.v1.EventSendToEth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventSendToEth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventSendToEth}
 */
proto.injective.peggy.v1.EventSendToEth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOutgoingTxId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventSendToEth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventSendToEth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventSendToEth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventSendToEth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutgoingTxId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 outgoing_tx_id = 1;
 * @return {number}
 */
proto.injective.peggy.v1.EventSendToEth.prototype.getOutgoingTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventSendToEth} returns this
 */
proto.injective.peggy.v1.EventSendToEth.prototype.setOutgoingTxId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventRequestBatch.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventRequestBatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventRequestBatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventRequestBatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchNonce: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventRequestBatch}
 */
proto.injective.peggy.v1.EventRequestBatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventRequestBatch;
  return proto.injective.peggy.v1.EventRequestBatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventRequestBatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventRequestBatch}
 */
proto.injective.peggy.v1.EventRequestBatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBatchNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventRequestBatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventRequestBatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventRequestBatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventRequestBatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 batch_nonce = 1;
 * @return {number}
 */
proto.injective.peggy.v1.EventRequestBatch.prototype.getBatchNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventRequestBatch} returns this
 */
proto.injective.peggy.v1.EventRequestBatch.prototype.setBatchNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventConfirmBatch.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventConfirmBatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventConfirmBatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventConfirmBatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchConfirmKey: msg.getBatchConfirmKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventConfirmBatch}
 */
proto.injective.peggy.v1.EventConfirmBatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventConfirmBatch;
  return proto.injective.peggy.v1.EventConfirmBatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventConfirmBatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventConfirmBatch}
 */
proto.injective.peggy.v1.EventConfirmBatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBatchConfirmKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventConfirmBatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventConfirmBatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventConfirmBatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventConfirmBatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchConfirmKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes batch_confirm_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.injective.peggy.v1.EventConfirmBatch.prototype.getBatchConfirmKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes batch_confirm_key = 1;
 * This is a type-conversion wrapper around `getBatchConfirmKey()`
 * @return {string}
 */
proto.injective.peggy.v1.EventConfirmBatch.prototype.getBatchConfirmKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBatchConfirmKey()));
};


/**
 * optional bytes batch_confirm_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBatchConfirmKey()`
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventConfirmBatch.prototype.getBatchConfirmKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBatchConfirmKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.peggy.v1.EventConfirmBatch} returns this
 */
proto.injective.peggy.v1.EventConfirmBatch.prototype.setBatchConfirmKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventDepositClaim.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventDepositClaim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventDepositClaim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventDepositClaim.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventDepositClaim}
 */
proto.injective.peggy.v1.EventDepositClaim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventDepositClaim;
  return proto.injective.peggy.v1.EventDepositClaim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventDepositClaim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventDepositClaim}
 */
proto.injective.peggy.v1.EventDepositClaim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventDepositClaim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventDepositClaim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventDepositClaim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventDepositClaim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.injective.peggy.v1.EventDepositClaim.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.injective.peggy.v1.EventDepositClaim.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventDepositClaim.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.peggy.v1.EventDepositClaim} returns this
 */
proto.injective.peggy.v1.EventDepositClaim.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventWithdrawClaim.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventWithdrawClaim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventWithdrawClaim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventWithdrawClaim.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventWithdrawClaim}
 */
proto.injective.peggy.v1.EventWithdrawClaim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventWithdrawClaim;
  return proto.injective.peggy.v1.EventWithdrawClaim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventWithdrawClaim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventWithdrawClaim}
 */
proto.injective.peggy.v1.EventWithdrawClaim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventWithdrawClaim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventWithdrawClaim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventWithdrawClaim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventWithdrawClaim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.injective.peggy.v1.EventWithdrawClaim.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.injective.peggy.v1.EventWithdrawClaim.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventWithdrawClaim.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.peggy.v1.EventWithdrawClaim} returns this
 */
proto.injective.peggy.v1.EventWithdrawClaim.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventERC20DeployedClaim.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventERC20DeployedClaim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventERC20DeployedClaim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventERC20DeployedClaim.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventERC20DeployedClaim}
 */
proto.injective.peggy.v1.EventERC20DeployedClaim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventERC20DeployedClaim;
  return proto.injective.peggy.v1.EventERC20DeployedClaim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventERC20DeployedClaim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventERC20DeployedClaim}
 */
proto.injective.peggy.v1.EventERC20DeployedClaim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventERC20DeployedClaim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventERC20DeployedClaim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventERC20DeployedClaim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventERC20DeployedClaim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.injective.peggy.v1.EventERC20DeployedClaim.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.injective.peggy.v1.EventERC20DeployedClaim.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventERC20DeployedClaim.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.peggy.v1.EventERC20DeployedClaim} returns this
 */
proto.injective.peggy.v1.EventERC20DeployedClaim.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventValsetUpdateClaim.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventValsetUpdateClaim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventValsetUpdateClaim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventValsetUpdateClaim.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventValsetUpdateClaim}
 */
proto.injective.peggy.v1.EventValsetUpdateClaim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventValsetUpdateClaim;
  return proto.injective.peggy.v1.EventValsetUpdateClaim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventValsetUpdateClaim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventValsetUpdateClaim}
 */
proto.injective.peggy.v1.EventValsetUpdateClaim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventValsetUpdateClaim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventValsetUpdateClaim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventValsetUpdateClaim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventValsetUpdateClaim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.injective.peggy.v1.EventValsetUpdateClaim.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.injective.peggy.v1.EventValsetUpdateClaim.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventValsetUpdateClaim.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.peggy.v1.EventValsetUpdateClaim} returns this
 */
proto.injective.peggy.v1.EventValsetUpdateClaim.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventCancelSendToEth.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventCancelSendToEth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventCancelSendToEth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventCancelSendToEth.toObject = function(includeInstance, msg) {
  var f, obj = {
    outgoingTxId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventCancelSendToEth}
 */
proto.injective.peggy.v1.EventCancelSendToEth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventCancelSendToEth;
  return proto.injective.peggy.v1.EventCancelSendToEth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventCancelSendToEth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventCancelSendToEth}
 */
proto.injective.peggy.v1.EventCancelSendToEth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOutgoingTxId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventCancelSendToEth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventCancelSendToEth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventCancelSendToEth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventCancelSendToEth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutgoingTxId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 outgoing_tx_id = 1;
 * @return {number}
 */
proto.injective.peggy.v1.EventCancelSendToEth.prototype.getOutgoingTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.EventCancelSendToEth} returns this
 */
proto.injective.peggy.v1.EventCancelSendToEth.prototype.setOutgoingTxId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.EventSubmitBadSignatureEvidence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.toObject = function(includeInstance, msg) {
  var f, obj = {
    badEthSignature: jspb.Message.getFieldWithDefault(msg, 1, ""),
    badEthSignatureSubject: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.EventSubmitBadSignatureEvidence}
 */
proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.EventSubmitBadSignatureEvidence;
  return proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.EventSubmitBadSignatureEvidence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.EventSubmitBadSignatureEvidence}
 */
proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBadEthSignature(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBadEthSignatureSubject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.EventSubmitBadSignatureEvidence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBadEthSignature();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBadEthSignatureSubject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string bad_eth_signature = 1;
 * @return {string}
 */
proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.prototype.getBadEthSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.peggy.v1.EventSubmitBadSignatureEvidence} returns this
 */
proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.prototype.setBadEthSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string bad_eth_signature_subject = 2;
 * @return {string}
 */
proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.prototype.getBadEthSignatureSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.peggy.v1.EventSubmitBadSignatureEvidence} returns this
 */
proto.injective.peggy.v1.EventSubmitBadSignatureEvidence.prototype.setBadEthSignatureSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.injective.peggy.v1);
