// source: ibc/core/channel/v1/channel.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var ibc_core_client_v1_client_pb = require('../../../../ibc/core/client/v1/client_pb.js');
goog.object.extend(proto, ibc_core_client_v1_client_pb);
goog.exportSymbol('proto.ibc.core.channel.v1.Acknowledgement', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.Acknowledgement.ResponseCase', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.Channel', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.Counterparty', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.IdentifiedChannel', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgAcknowledgement', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelCloseConfirm', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelCloseInit', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelOpenAck', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelOpenConfirm', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelOpenInit', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgChannelOpenTry', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgRecvPacket', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgTimeout', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.MsgTimeoutOnClose', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.Order', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.Packet', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.PacketAckCommitment', null, global);
goog.exportSymbol('proto.ibc.core.channel.v1.State', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelOpenInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelOpenInit.displayName = 'proto.ibc.core.channel.v1.MsgChannelOpenInit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelOpenTry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelOpenTry.displayName = 'proto.ibc.core.channel.v1.MsgChannelOpenTry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelOpenAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelOpenAck.displayName = 'proto.ibc.core.channel.v1.MsgChannelOpenAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelOpenConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelOpenConfirm.displayName = 'proto.ibc.core.channel.v1.MsgChannelOpenConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelCloseInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelCloseInit.displayName = 'proto.ibc.core.channel.v1.MsgChannelCloseInit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgChannelCloseConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgChannelCloseConfirm.displayName = 'proto.ibc.core.channel.v1.MsgChannelCloseConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgRecvPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgRecvPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgRecvPacket.displayName = 'proto.ibc.core.channel.v1.MsgRecvPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgTimeout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgTimeout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgTimeout.displayName = 'proto.ibc.core.channel.v1.MsgTimeout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgTimeoutOnClose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgTimeoutOnClose.displayName = 'proto.ibc.core.channel.v1.MsgTimeoutOnClose';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.MsgAcknowledgement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.MsgAcknowledgement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.MsgAcknowledgement.displayName = 'proto.ibc.core.channel.v1.MsgAcknowledgement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.Channel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.core.channel.v1.Channel.repeatedFields_, null);
};
goog.inherits(proto.ibc.core.channel.v1.Channel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.Channel.displayName = 'proto.ibc.core.channel.v1.Channel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.IdentifiedChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.core.channel.v1.IdentifiedChannel.repeatedFields_, null);
};
goog.inherits(proto.ibc.core.channel.v1.IdentifiedChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.IdentifiedChannel.displayName = 'proto.ibc.core.channel.v1.IdentifiedChannel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.Counterparty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.Counterparty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.Counterparty.displayName = 'proto.ibc.core.channel.v1.Counterparty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.Packet.displayName = 'proto.ibc.core.channel.v1.Packet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.PacketAckCommitment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.channel.v1.PacketAckCommitment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.PacketAckCommitment.displayName = 'proto.ibc.core.channel.v1.PacketAckCommitment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.channel.v1.Acknowledgement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ibc.core.channel.v1.Acknowledgement.oneofGroups_);
};
goog.inherits(proto.ibc.core.channel.v1.Acknowledgement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.channel.v1.Acknowledgement.displayName = 'proto.ibc.core.channel.v1.Acknowledgement';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelOpenInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    channel: (f = msg.getChannel()) && proto.ibc.core.channel.v1.Channel.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInit}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelOpenInit;
  return proto.ibc.core.channel.v1.MsgChannelOpenInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInit}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 3:
      var value = new proto.ibc.core.channel.v1.Channel;
      reader.readMessage(value,proto.ibc.core.channel.v1.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelOpenInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ibc.core.channel.v1.Channel.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInit} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInit} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Channel channel = 3;
 * @return {?proto.ibc.core.channel.v1.Channel}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.getChannel = function() {
  return /** @type{?proto.ibc.core.channel.v1.Channel} */ (
    jspb.Message.getWrapperField(this, proto.ibc.core.channel.v1.Channel, 3));
};


/**
 * @param {?proto.ibc.core.channel.v1.Channel|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInit} returns this
*/
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInit} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string signer = 4;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenInit} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenInit.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelOpenTry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenTry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    desiredChannelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    counterpartyChosenChannelId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    channel: (f = msg.getChannel()) && proto.ibc.core.channel.v1.Channel.toObject(includeInstance, f),
    counterpartyVersion: jspb.Message.getFieldWithDefault(msg, 5, ""),
    proofInit: msg.getProofInit_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelOpenTry;
  return proto.ibc.core.channel.v1.MsgChannelOpenTry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenTry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesiredChannelId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounterpartyChosenChannelId(value);
      break;
    case 4:
      var value = new proto.ibc.core.channel.v1.Channel;
      reader.readMessage(value,proto.ibc.core.channel.v1.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounterpartyVersion(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofInit(value);
      break;
    case 7:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelOpenTry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenTry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDesiredChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCounterpartyChosenChannelId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ibc.core.channel.v1.Channel.serializeBinaryToWriter
    );
  }
  f = message.getCounterpartyVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getProofInit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string desired_channel_id = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getDesiredChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setDesiredChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string counterparty_chosen_channel_id = 3;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getCounterpartyChosenChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setCounterpartyChosenChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Channel channel = 4;
 * @return {?proto.ibc.core.channel.v1.Channel}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getChannel = function() {
  return /** @type{?proto.ibc.core.channel.v1.Channel} */ (
    jspb.Message.getWrapperField(this, proto.ibc.core.channel.v1.Channel, 4));
};


/**
 * @param {?proto.ibc.core.channel.v1.Channel|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
*/
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string counterparty_version = 5;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getCounterpartyVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setCounterpartyVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes proof_init = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getProofInit = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes proof_init = 6;
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getProofInit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofInit()));
};


/**
 * optional bytes proof_init = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getProofInit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofInit()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setProofInit = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 7;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 7));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
*/
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string signer = 8;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenTry} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenTry.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelOpenAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    counterpartyChannelId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    counterpartyVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    proofTry: msg.getProofTry_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelOpenAck;
  return proto.ibc.core.channel.v1.MsgChannelOpenAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounterpartyChannelId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounterpartyVersion(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofTry(value);
      break;
    case 6:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelOpenAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCounterpartyChannelId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCounterpartyVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProofTry_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string counterparty_channel_id = 3;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getCounterpartyChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setCounterpartyChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string counterparty_version = 4;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getCounterpartyVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setCounterpartyVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes proof_try = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getProofTry = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes proof_try = 5;
 * This is a type-conversion wrapper around `getProofTry()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getProofTry_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofTry()));
};


/**
 * optional bytes proof_try = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofTry()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getProofTry_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofTry()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setProofTry = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 6;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 6));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
*/
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string signer = 7;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenAck} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenAck.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelOpenConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    proofAck: msg.getProofAck_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelOpenConfirm;
  return proto.ibc.core.channel.v1.MsgChannelOpenConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofAck(value);
      break;
    case 4:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelOpenConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProofAck_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes proof_ack = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getProofAck = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes proof_ack = 3;
 * This is a type-conversion wrapper around `getProofAck()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getProofAck_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofAck()));
};


/**
 * optional bytes proof_ack = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofAck()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getProofAck_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofAck()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.setProofAck = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 4;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 4));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} returns this
*/
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string signer = 5;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelOpenConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelOpenConfirm.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelCloseInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signer: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseInit}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelCloseInit;
  return proto.ibc.core.channel.v1.MsgChannelCloseInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseInit}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelCloseInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseInit} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseInit} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string signer = 3;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseInit} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseInit.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgChannelCloseConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    proofInit: msg.getProofInit_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgChannelCloseConfirm;
  return proto.ibc.core.channel.v1.MsgChannelCloseConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofInit(value);
      break;
    case 4:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgChannelCloseConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProofInit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes proof_init = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getProofInit = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes proof_init = 3;
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getProofInit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofInit()));
};


/**
 * optional bytes proof_init = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getProofInit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofInit()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.setProofInit = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 4;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 4));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} returns this
*/
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string signer = 5;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgChannelCloseConfirm} returns this
 */
proto.ibc.core.channel.v1.MsgChannelCloseConfirm.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgRecvPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgRecvPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgRecvPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    packet: (f = msg.getPacket()) && proto.ibc.core.channel.v1.Packet.toObject(includeInstance, f),
    proof: msg.getProof_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgRecvPacket;
  return proto.ibc.core.channel.v1.MsgRecvPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgRecvPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ibc.core.channel.v1.Packet;
      reader.readMessage(value,proto.ibc.core.channel.v1.Packet.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    case 3:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgRecvPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgRecvPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgRecvPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ibc.core.channel.v1.Packet.serializeBinaryToWriter
    );
  }
  f = message.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Packet packet = 1;
 * @return {?proto.ibc.core.channel.v1.Packet}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.getPacket = function() {
  return /** @type{?proto.ibc.core.channel.v1.Packet} */ (
    jspb.Message.getWrapperField(this, proto.ibc.core.channel.v1.Packet, 1));
};


/**
 * @param {?proto.ibc.core.channel.v1.Packet|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket} returns this
*/
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.setPacket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket} returns this
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.clearPacket = function() {
  return this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes proof = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes proof = 2;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket} returns this
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.setProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 3;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 3));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket} returns this
*/
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket} returns this
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string signer = 4;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgRecvPacket} returns this
 */
proto.ibc.core.channel.v1.MsgRecvPacket.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgTimeout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgTimeout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgTimeout.toObject = function(includeInstance, msg) {
  var f, obj = {
    packet: (f = msg.getPacket()) && proto.ibc.core.channel.v1.Packet.toObject(includeInstance, f),
    proof: msg.getProof_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    nextSequenceRecv: jspb.Message.getFieldWithDefault(msg, 4, 0),
    signer: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgTimeout}
 */
proto.ibc.core.channel.v1.MsgTimeout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgTimeout;
  return proto.ibc.core.channel.v1.MsgTimeout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgTimeout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgTimeout}
 */
proto.ibc.core.channel.v1.MsgTimeout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ibc.core.channel.v1.Packet;
      reader.readMessage(value,proto.ibc.core.channel.v1.Packet.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    case 3:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNextSequenceRecv(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgTimeout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgTimeout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgTimeout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ibc.core.channel.v1.Packet.serializeBinaryToWriter
    );
  }
  f = message.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getNextSequenceRecv();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional Packet packet = 1;
 * @return {?proto.ibc.core.channel.v1.Packet}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getPacket = function() {
  return /** @type{?proto.ibc.core.channel.v1.Packet} */ (
    jspb.Message.getWrapperField(this, proto.ibc.core.channel.v1.Packet, 1));
};


/**
 * @param {?proto.ibc.core.channel.v1.Packet|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
*/
proto.ibc.core.channel.v1.MsgTimeout.prototype.setPacket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.clearPacket = function() {
  return this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes proof = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes proof = 2;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.setProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 3;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 3));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
*/
proto.ibc.core.channel.v1.MsgTimeout.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 next_sequence_recv = 4;
 * @return {number}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getNextSequenceRecv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.setNextSequenceRecv = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string signer = 5;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeout} returns this
 */
proto.ibc.core.channel.v1.MsgTimeout.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgTimeoutOnClose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.toObject = function(includeInstance, msg) {
  var f, obj = {
    packet: (f = msg.getPacket()) && proto.ibc.core.channel.v1.Packet.toObject(includeInstance, f),
    proof: msg.getProof_asB64(),
    proofClose: msg.getProofClose_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    nextSequenceRecv: jspb.Message.getFieldWithDefault(msg, 5, 0),
    signer: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgTimeoutOnClose;
  return proto.ibc.core.channel.v1.MsgTimeoutOnClose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ibc.core.channel.v1.Packet;
      reader.readMessage(value,proto.ibc.core.channel.v1.Packet.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofClose(value);
      break;
    case 4:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNextSequenceRecv(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgTimeoutOnClose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ibc.core.channel.v1.Packet.serializeBinaryToWriter
    );
  }
  f = message.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProofClose_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getNextSequenceRecv();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional Packet packet = 1;
 * @return {?proto.ibc.core.channel.v1.Packet}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getPacket = function() {
  return /** @type{?proto.ibc.core.channel.v1.Packet} */ (
    jspb.Message.getWrapperField(this, proto.ibc.core.channel.v1.Packet, 1));
};


/**
 * @param {?proto.ibc.core.channel.v1.Packet|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
*/
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.setPacket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.clearPacket = function() {
  return this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes proof = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes proof = 2;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.setProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes proof_close = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProofClose = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes proof_close = 3;
 * This is a type-conversion wrapper around `getProofClose()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProofClose_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofClose()));
};


/**
 * optional bytes proof_close = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofClose()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProofClose_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofClose()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.setProofClose = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 4;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 4));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
*/
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 next_sequence_recv = 5;
 * @return {number}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getNextSequenceRecv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.setNextSequenceRecv = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string signer = 6;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgTimeoutOnClose} returns this
 */
proto.ibc.core.channel.v1.MsgTimeoutOnClose.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.MsgAcknowledgement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.MsgAcknowledgement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.toObject = function(includeInstance, msg) {
  var f, obj = {
    packet: (f = msg.getPacket()) && proto.ibc.core.channel.v1.Packet.toObject(includeInstance, f),
    acknowledgement: msg.getAcknowledgement_asB64(),
    proof: msg.getProof_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.MsgAcknowledgement;
  return proto.ibc.core.channel.v1.MsgAcknowledgement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.MsgAcknowledgement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ibc.core.channel.v1.Packet;
      reader.readMessage(value,proto.ibc.core.channel.v1.Packet.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAcknowledgement(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    case 4:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.MsgAcknowledgement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.MsgAcknowledgement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ibc.core.channel.v1.Packet.serializeBinaryToWriter
    );
  }
  f = message.getAcknowledgement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional Packet packet = 1;
 * @return {?proto.ibc.core.channel.v1.Packet}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getPacket = function() {
  return /** @type{?proto.ibc.core.channel.v1.Packet} */ (
    jspb.Message.getWrapperField(this, proto.ibc.core.channel.v1.Packet, 1));
};


/**
 * @param {?proto.ibc.core.channel.v1.Packet|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
*/
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.setPacket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.clearPacket = function() {
  return this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes acknowledgement = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getAcknowledgement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes acknowledgement = 2;
 * This is a type-conversion wrapper around `getAcknowledgement()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getAcknowledgement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAcknowledgement()));
};


/**
 * optional bytes acknowledgement = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAcknowledgement()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getAcknowledgement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAcknowledgement()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.setAcknowledgement = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes proof = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes proof = 3;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.setProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 4;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 4));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
*/
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string signer = 5;
 * @return {string}
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.MsgAcknowledgement} returns this
 */
proto.ibc.core.channel.v1.MsgAcknowledgement.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.core.channel.v1.Channel.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.Channel.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.Channel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.Channel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.Channel.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ordering: jspb.Message.getFieldWithDefault(msg, 2, 0),
    counterparty: (f = msg.getCounterparty()) && proto.ibc.core.channel.v1.Counterparty.toObject(includeInstance, f),
    connectionHopsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    version: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.Channel}
 */
proto.ibc.core.channel.v1.Channel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.Channel;
  return proto.ibc.core.channel.v1.Channel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.Channel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.Channel}
 */
proto.ibc.core.channel.v1.Channel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ibc.core.channel.v1.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {!proto.ibc.core.channel.v1.Order} */ (reader.readEnum());
      msg.setOrdering(value);
      break;
    case 3:
      var value = new proto.ibc.core.channel.v1.Counterparty;
      reader.readMessage(value,proto.ibc.core.channel.v1.Counterparty.deserializeBinaryFromReader);
      msg.setCounterparty(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addConnectionHops(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.Channel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.Channel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.Channel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.Channel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOrdering();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCounterparty();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ibc.core.channel.v1.Counterparty.serializeBinaryToWriter
    );
  }
  f = message.getConnectionHopsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional State state = 1;
 * @return {!proto.ibc.core.channel.v1.State}
 */
proto.ibc.core.channel.v1.Channel.prototype.getState = function() {
  return /** @type {!proto.ibc.core.channel.v1.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ibc.core.channel.v1.State} value
 * @return {!proto.ibc.core.channel.v1.Channel} returns this
 */
proto.ibc.core.channel.v1.Channel.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Order ordering = 2;
 * @return {!proto.ibc.core.channel.v1.Order}
 */
proto.ibc.core.channel.v1.Channel.prototype.getOrdering = function() {
  return /** @type {!proto.ibc.core.channel.v1.Order} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ibc.core.channel.v1.Order} value
 * @return {!proto.ibc.core.channel.v1.Channel} returns this
 */
proto.ibc.core.channel.v1.Channel.prototype.setOrdering = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Counterparty counterparty = 3;
 * @return {?proto.ibc.core.channel.v1.Counterparty}
 */
proto.ibc.core.channel.v1.Channel.prototype.getCounterparty = function() {
  return /** @type{?proto.ibc.core.channel.v1.Counterparty} */ (
    jspb.Message.getWrapperField(this, proto.ibc.core.channel.v1.Counterparty, 3));
};


/**
 * @param {?proto.ibc.core.channel.v1.Counterparty|undefined} value
 * @return {!proto.ibc.core.channel.v1.Channel} returns this
*/
proto.ibc.core.channel.v1.Channel.prototype.setCounterparty = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.Channel} returns this
 */
proto.ibc.core.channel.v1.Channel.prototype.clearCounterparty = function() {
  return this.setCounterparty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.Channel.prototype.hasCounterparty = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string connection_hops = 4;
 * @return {!Array<string>}
 */
proto.ibc.core.channel.v1.Channel.prototype.getConnectionHopsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.core.channel.v1.Channel} returns this
 */
proto.ibc.core.channel.v1.Channel.prototype.setConnectionHopsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.core.channel.v1.Channel} returns this
 */
proto.ibc.core.channel.v1.Channel.prototype.addConnectionHops = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.core.channel.v1.Channel} returns this
 */
proto.ibc.core.channel.v1.Channel.prototype.clearConnectionHopsList = function() {
  return this.setConnectionHopsList([]);
};


/**
 * optional string version = 5;
 * @return {string}
 */
proto.ibc.core.channel.v1.Channel.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.Channel} returns this
 */
proto.ibc.core.channel.v1.Channel.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.core.channel.v1.IdentifiedChannel.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.IdentifiedChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.IdentifiedChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.IdentifiedChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ordering: jspb.Message.getFieldWithDefault(msg, 2, 0),
    counterparty: (f = msg.getCounterparty()) && proto.ibc.core.channel.v1.Counterparty.toObject(includeInstance, f),
    connectionHopsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    version: jspb.Message.getFieldWithDefault(msg, 5, ""),
    portId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.IdentifiedChannel}
 */
proto.ibc.core.channel.v1.IdentifiedChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.IdentifiedChannel;
  return proto.ibc.core.channel.v1.IdentifiedChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.IdentifiedChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.IdentifiedChannel}
 */
proto.ibc.core.channel.v1.IdentifiedChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ibc.core.channel.v1.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {!proto.ibc.core.channel.v1.Order} */ (reader.readEnum());
      msg.setOrdering(value);
      break;
    case 3:
      var value = new proto.ibc.core.channel.v1.Counterparty;
      reader.readMessage(value,proto.ibc.core.channel.v1.Counterparty.deserializeBinaryFromReader);
      msg.setCounterparty(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addConnectionHops(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.IdentifiedChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.IdentifiedChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.IdentifiedChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOrdering();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCounterparty();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ibc.core.channel.v1.Counterparty.serializeBinaryToWriter
    );
  }
  f = message.getConnectionHopsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional State state = 1;
 * @return {!proto.ibc.core.channel.v1.State}
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.getState = function() {
  return /** @type {!proto.ibc.core.channel.v1.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ibc.core.channel.v1.State} value
 * @return {!proto.ibc.core.channel.v1.IdentifiedChannel} returns this
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Order ordering = 2;
 * @return {!proto.ibc.core.channel.v1.Order}
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.getOrdering = function() {
  return /** @type {!proto.ibc.core.channel.v1.Order} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ibc.core.channel.v1.Order} value
 * @return {!proto.ibc.core.channel.v1.IdentifiedChannel} returns this
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.setOrdering = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Counterparty counterparty = 3;
 * @return {?proto.ibc.core.channel.v1.Counterparty}
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.getCounterparty = function() {
  return /** @type{?proto.ibc.core.channel.v1.Counterparty} */ (
    jspb.Message.getWrapperField(this, proto.ibc.core.channel.v1.Counterparty, 3));
};


/**
 * @param {?proto.ibc.core.channel.v1.Counterparty|undefined} value
 * @return {!proto.ibc.core.channel.v1.IdentifiedChannel} returns this
*/
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.setCounterparty = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.IdentifiedChannel} returns this
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.clearCounterparty = function() {
  return this.setCounterparty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.hasCounterparty = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string connection_hops = 4;
 * @return {!Array<string>}
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.getConnectionHopsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.core.channel.v1.IdentifiedChannel} returns this
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.setConnectionHopsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.core.channel.v1.IdentifiedChannel} returns this
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.addConnectionHops = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.core.channel.v1.IdentifiedChannel} returns this
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.clearConnectionHopsList = function() {
  return this.setConnectionHopsList([]);
};


/**
 * optional string version = 5;
 * @return {string}
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.IdentifiedChannel} returns this
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string port_id = 6;
 * @return {string}
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.IdentifiedChannel} returns this
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string channel_id = 7;
 * @return {string}
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.IdentifiedChannel} returns this
 */
proto.ibc.core.channel.v1.IdentifiedChannel.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.Counterparty.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.Counterparty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.Counterparty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.Counterparty.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.Counterparty}
 */
proto.ibc.core.channel.v1.Counterparty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.Counterparty;
  return proto.ibc.core.channel.v1.Counterparty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.Counterparty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.Counterparty}
 */
proto.ibc.core.channel.v1.Counterparty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.Counterparty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.Counterparty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.Counterparty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.Counterparty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.Counterparty.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.Counterparty} returns this
 */
proto.ibc.core.channel.v1.Counterparty.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.Counterparty.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.Counterparty} returns this
 */
proto.ibc.core.channel.v1.Counterparty.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequence: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sourcePort: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourceChannel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    destinationPort: jspb.Message.getFieldWithDefault(msg, 4, ""),
    destinationChannel: jspb.Message.getFieldWithDefault(msg, 5, ""),
    data: msg.getData_asB64(),
    timeoutHeight: (f = msg.getTimeoutHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    timeoutTimestamp: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.Packet}
 */
proto.ibc.core.channel.v1.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.Packet;
  return proto.ibc.core.channel.v1.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.Packet}
 */
proto.ibc.core.channel.v1.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcePort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceChannel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationPort(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationChannel(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setTimeoutHeight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeoutTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSourcePort();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourceChannel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDestinationPort();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDestinationChannel();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getTimeoutHeight();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getTimeoutTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional uint64 sequence = 1;
 * @return {number}
 */
proto.ibc.core.channel.v1.Packet.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.core.channel.v1.Packet} returns this
 */
proto.ibc.core.channel.v1.Packet.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string source_port = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.Packet.prototype.getSourcePort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.Packet} returns this
 */
proto.ibc.core.channel.v1.Packet.prototype.setSourcePort = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string source_channel = 3;
 * @return {string}
 */
proto.ibc.core.channel.v1.Packet.prototype.getSourceChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.Packet} returns this
 */
proto.ibc.core.channel.v1.Packet.prototype.setSourceChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string destination_port = 4;
 * @return {string}
 */
proto.ibc.core.channel.v1.Packet.prototype.getDestinationPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.Packet} returns this
 */
proto.ibc.core.channel.v1.Packet.prototype.setDestinationPort = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string destination_channel = 5;
 * @return {string}
 */
proto.ibc.core.channel.v1.Packet.prototype.getDestinationChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.Packet} returns this
 */
proto.ibc.core.channel.v1.Packet.prototype.setDestinationChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.Packet.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ibc.core.channel.v1.Packet.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.Packet.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.Packet} returns this
 */
proto.ibc.core.channel.v1.Packet.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional ibc.core.client.v1.Height timeout_height = 7;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.channel.v1.Packet.prototype.getTimeoutHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 7));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.channel.v1.Packet} returns this
*/
proto.ibc.core.channel.v1.Packet.prototype.setTimeoutHeight = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.channel.v1.Packet} returns this
 */
proto.ibc.core.channel.v1.Packet.prototype.clearTimeoutHeight = function() {
  return this.setTimeoutHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.Packet.prototype.hasTimeoutHeight = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 timeout_timestamp = 8;
 * @return {number}
 */
proto.ibc.core.channel.v1.Packet.prototype.getTimeoutTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.core.channel.v1.Packet} returns this
 */
proto.ibc.core.channel.v1.Packet.prototype.setTimeoutTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.PacketAckCommitment.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.PacketAckCommitment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.PacketAckCommitment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.PacketAckCommitment.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.PacketAckCommitment}
 */
proto.ibc.core.channel.v1.PacketAckCommitment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.PacketAckCommitment;
  return proto.ibc.core.channel.v1.PacketAckCommitment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.PacketAckCommitment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.PacketAckCommitment}
 */
proto.ibc.core.channel.v1.PacketAckCommitment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.PacketAckCommitment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.PacketAckCommitment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.PacketAckCommitment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.PacketAckCommitment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.core.channel.v1.PacketAckCommitment.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.PacketAckCommitment} returns this
 */
proto.ibc.core.channel.v1.PacketAckCommitment.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.core.channel.v1.PacketAckCommitment.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.PacketAckCommitment} returns this
 */
proto.ibc.core.channel.v1.PacketAckCommitment.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 sequence = 3;
 * @return {number}
 */
proto.ibc.core.channel.v1.PacketAckCommitment.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.core.channel.v1.PacketAckCommitment} returns this
 */
proto.ibc.core.channel.v1.PacketAckCommitment.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.PacketAckCommitment.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes hash = 4;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.ibc.core.channel.v1.PacketAckCommitment.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.PacketAckCommitment.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.PacketAckCommitment} returns this
 */
proto.ibc.core.channel.v1.PacketAckCommitment.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ibc.core.channel.v1.Acknowledgement.oneofGroups_ = [[21,22]];

/**
 * @enum {number}
 */
proto.ibc.core.channel.v1.Acknowledgement.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  RESULT: 21,
  ERROR: 22
};

/**
 * @return {proto.ibc.core.channel.v1.Acknowledgement.ResponseCase}
 */
proto.ibc.core.channel.v1.Acknowledgement.prototype.getResponseCase = function() {
  return /** @type {proto.ibc.core.channel.v1.Acknowledgement.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.ibc.core.channel.v1.Acknowledgement.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.channel.v1.Acknowledgement.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.channel.v1.Acknowledgement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.channel.v1.Acknowledgement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.Acknowledgement.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: msg.getResult_asB64(),
    error: jspb.Message.getFieldWithDefault(msg, 22, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.channel.v1.Acknowledgement}
 */
proto.ibc.core.channel.v1.Acknowledgement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.channel.v1.Acknowledgement;
  return proto.ibc.core.channel.v1.Acknowledgement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.channel.v1.Acknowledgement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.channel.v1.Acknowledgement}
 */
proto.ibc.core.channel.v1.Acknowledgement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 21:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResult(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.Acknowledgement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.channel.v1.Acknowledgement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.channel.v1.Acknowledgement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.channel.v1.Acknowledgement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeBytes(
      21,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeString(
      22,
      f
    );
  }
};


/**
 * optional bytes result = 21;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.channel.v1.Acknowledgement.prototype.getResult = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * optional bytes result = 21;
 * This is a type-conversion wrapper around `getResult()`
 * @return {string}
 */
proto.ibc.core.channel.v1.Acknowledgement.prototype.getResult_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResult()));
};


/**
 * optional bytes result = 21;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResult()`
 * @return {!Uint8Array}
 */
proto.ibc.core.channel.v1.Acknowledgement.prototype.getResult_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResult()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.channel.v1.Acknowledgement} returns this
 */
proto.ibc.core.channel.v1.Acknowledgement.prototype.setResult = function(value) {
  return jspb.Message.setOneofField(this, 21, proto.ibc.core.channel.v1.Acknowledgement.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ibc.core.channel.v1.Acknowledgement} returns this
 */
proto.ibc.core.channel.v1.Acknowledgement.prototype.clearResult = function() {
  return jspb.Message.setOneofField(this, 21, proto.ibc.core.channel.v1.Acknowledgement.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.Acknowledgement.prototype.hasResult = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional string error = 22;
 * @return {string}
 */
proto.ibc.core.channel.v1.Acknowledgement.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.channel.v1.Acknowledgement} returns this
 */
proto.ibc.core.channel.v1.Acknowledgement.prototype.setError = function(value) {
  return jspb.Message.setOneofField(this, 22, proto.ibc.core.channel.v1.Acknowledgement.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ibc.core.channel.v1.Acknowledgement} returns this
 */
proto.ibc.core.channel.v1.Acknowledgement.prototype.clearError = function() {
  return jspb.Message.setOneofField(this, 22, proto.ibc.core.channel.v1.Acknowledgement.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.channel.v1.Acknowledgement.prototype.hasError = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * @enum {number}
 */
proto.ibc.core.channel.v1.State = {
  STATE_UNINITIALIZED_UNSPECIFIED: 0,
  STATE_INIT: 1,
  STATE_TRYOPEN: 2,
  STATE_OPEN: 3,
  STATE_CLOSED: 4
};

/**
 * @enum {number}
 */
proto.ibc.core.channel.v1.Order = {
  ORDER_NONE_UNSPECIFIED: 0,
  ORDER_UNORDERED: 1,
  ORDER_ORDERED: 2
};

goog.object.extend(exports, proto.ibc.core.channel.v1);
