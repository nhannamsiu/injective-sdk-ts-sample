// source: exchange/injective_derivative_exchange_rpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.injective_derivative_exchange_rpc.DerivativeLimitOrder', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.DerivativeMarketInfo', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.DerivativePosition', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.DerivativeTrade', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.FundingPayment', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.FundingPaymentsRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.FundingPaymentsResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.MarketRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.MarketResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.MarketsRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.MarketsResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.OrderbookRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.OrderbookResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.OrdersRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.OrdersResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.PerpetualMarketFunding', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.PerpetualMarketInfo', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.PositionDelta', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.PositionsRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.PositionsResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.PriceLevel', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.StreamMarketRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.StreamMarketResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.StreamOrderbookRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.StreamOrderbookResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.StreamOrdersRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.StreamOrdersResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.StreamPositionsRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.StreamPositionsResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.StreamTradesRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.StreamTradesResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.TokenMeta', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.TradesRequest', null, global);
goog.exportSymbol('proto.injective_derivative_exchange_rpc.TradesResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.MarketsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.MarketsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.MarketsRequest.displayName = 'proto.injective_derivative_exchange_rpc.MarketsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.MarketsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_derivative_exchange_rpc.MarketsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.MarketsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.MarketsResponse.displayName = 'proto.injective_derivative_exchange_rpc.MarketsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.DerivativeMarketInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.displayName = 'proto.injective_derivative_exchange_rpc.DerivativeMarketInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.TokenMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.TokenMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.TokenMeta.displayName = 'proto.injective_derivative_exchange_rpc.TokenMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.PerpetualMarketInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.displayName = 'proto.injective_derivative_exchange_rpc.PerpetualMarketInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketFunding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.PerpetualMarketFunding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.displayName = 'proto.injective_derivative_exchange_rpc.PerpetualMarketFunding';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.displayName = 'proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.MarketRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.MarketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.MarketRequest.displayName = 'proto.injective_derivative_exchange_rpc.MarketRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.MarketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.MarketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.MarketResponse.displayName = 'proto.injective_derivative_exchange_rpc.MarketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.StreamMarketRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_derivative_exchange_rpc.StreamMarketRequest.repeatedFields_, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.StreamMarketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.StreamMarketRequest.displayName = 'proto.injective_derivative_exchange_rpc.StreamMarketRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.StreamMarketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.StreamMarketResponse.displayName = 'proto.injective_derivative_exchange_rpc.StreamMarketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.OrderbookRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.OrderbookRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.OrderbookRequest.displayName = 'proto.injective_derivative_exchange_rpc.OrderbookRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.OrderbookResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.OrderbookResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.OrderbookResponse.displayName = 'proto.injective_derivative_exchange_rpc.OrderbookResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.repeatedFields_, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.displayName = 'proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.PriceLevel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.PriceLevel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.PriceLevel.displayName = 'proto.injective_derivative_exchange_rpc.PriceLevel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.StreamOrderbookRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.StreamOrderbookRequest.displayName = 'proto.injective_derivative_exchange_rpc.StreamOrderbookRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.StreamOrderbookResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.displayName = 'proto.injective_derivative_exchange_rpc.StreamOrderbookResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.OrdersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.OrdersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.OrdersRequest.displayName = 'proto.injective_derivative_exchange_rpc.OrdersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.OrdersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_derivative_exchange_rpc.OrdersResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.OrdersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.OrdersResponse.displayName = 'proto.injective_derivative_exchange_rpc.OrdersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.DerivativeLimitOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.displayName = 'proto.injective_derivative_exchange_rpc.DerivativeLimitOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.PositionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.PositionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.PositionsRequest.displayName = 'proto.injective_derivative_exchange_rpc.PositionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.PositionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_derivative_exchange_rpc.PositionsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.PositionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.PositionsResponse.displayName = 'proto.injective_derivative_exchange_rpc.PositionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.DerivativePosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.DerivativePosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.DerivativePosition.displayName = 'proto.injective_derivative_exchange_rpc.DerivativePosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest.displayName = 'proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.displayName = 'proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.FundingPaymentsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.displayName = 'proto.injective_derivative_exchange_rpc.FundingPaymentsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.FundingPaymentsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.displayName = 'proto.injective_derivative_exchange_rpc.FundingPaymentsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.FundingPayment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.FundingPayment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.FundingPayment.displayName = 'proto.injective_derivative_exchange_rpc.FundingPayment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.StreamPositionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.StreamPositionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.StreamPositionsRequest.displayName = 'proto.injective_derivative_exchange_rpc.StreamPositionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.StreamPositionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.StreamPositionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.StreamPositionsResponse.displayName = 'proto.injective_derivative_exchange_rpc.StreamPositionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.StreamOrdersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.StreamOrdersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.StreamOrdersRequest.displayName = 'proto.injective_derivative_exchange_rpc.StreamOrdersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.StreamOrdersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.StreamOrdersResponse.displayName = 'proto.injective_derivative_exchange_rpc.StreamOrdersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.TradesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.TradesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.TradesRequest.displayName = 'proto.injective_derivative_exchange_rpc.TradesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.TradesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_derivative_exchange_rpc.TradesResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.TradesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.TradesResponse.displayName = 'proto.injective_derivative_exchange_rpc.TradesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.DerivativeTrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.DerivativeTrade.displayName = 'proto.injective_derivative_exchange_rpc.DerivativeTrade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.PositionDelta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.PositionDelta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.PositionDelta.displayName = 'proto.injective_derivative_exchange_rpc.PositionDelta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.StreamTradesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.StreamTradesRequest.displayName = 'proto.injective_derivative_exchange_rpc.StreamTradesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.StreamTradesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.StreamTradesResponse.displayName = 'proto.injective_derivative_exchange_rpc.StreamTradesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.displayName = 'proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.displayName = 'proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.displayName = 'proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.displayName = 'proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.MarketsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.MarketsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.MarketsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.MarketsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketStatus: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quoteDenom: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.MarketsRequest}
 */
proto.injective_derivative_exchange_rpc.MarketsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.MarketsRequest;
  return proto.injective_derivative_exchange_rpc.MarketsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.MarketsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.MarketsRequest}
 */
proto.injective_derivative_exchange_rpc.MarketsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteDenom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.MarketsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.MarketsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.MarketsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.MarketsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuoteDenom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string market_status = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.MarketsRequest.prototype.getMarketStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.MarketsRequest} returns this
 */
proto.injective_derivative_exchange_rpc.MarketsRequest.prototype.setMarketStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string quote_denom = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.MarketsRequest.prototype.getQuoteDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.MarketsRequest} returns this
 */
proto.injective_derivative_exchange_rpc.MarketsRequest.prototype.setQuoteDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_derivative_exchange_rpc.MarketsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.MarketsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.MarketsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.MarketsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.MarketsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketsList: jspb.Message.toObjectList(msg.getMarketsList(),
    proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.MarketsResponse}
 */
proto.injective_derivative_exchange_rpc.MarketsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.MarketsResponse;
  return proto.injective_derivative_exchange_rpc.MarketsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.MarketsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.MarketsResponse}
 */
proto.injective_derivative_exchange_rpc.MarketsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativeMarketInfo;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.deserializeBinaryFromReader);
      msg.addMarkets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.MarketsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.MarketsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.MarketsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.MarketsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DerivativeMarketInfo markets = 1;
 * @return {!Array<!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo>}
 */
proto.injective_derivative_exchange_rpc.MarketsResponse.prototype.getMarketsList = function() {
  return /** @type{!Array<!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativeMarketInfo, 1));
};


/**
 * @param {!Array<!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo>} value
 * @return {!proto.injective_derivative_exchange_rpc.MarketsResponse} returns this
*/
proto.injective_derivative_exchange_rpc.MarketsResponse.prototype.setMarketsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo}
 */
proto.injective_derivative_exchange_rpc.MarketsResponse.prototype.addMarkets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_derivative_exchange_rpc.DerivativeMarketInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_derivative_exchange_rpc.MarketsResponse} returns this
 */
proto.injective_derivative_exchange_rpc.MarketsResponse.prototype.clearMarketsList = function() {
  return this.setMarketsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    marketStatus: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ticker: jspb.Message.getFieldWithDefault(msg, 3, ""),
    oracleBase: jspb.Message.getFieldWithDefault(msg, 4, ""),
    oracleQuote: jspb.Message.getFieldWithDefault(msg, 5, ""),
    oracleType: jspb.Message.getFieldWithDefault(msg, 6, ""),
    oracleScaleFactor: jspb.Message.getFieldWithDefault(msg, 7, 0),
    initialMarginRatio: jspb.Message.getFieldWithDefault(msg, 8, ""),
    maintenanceMarginRatio: jspb.Message.getFieldWithDefault(msg, 9, ""),
    quoteDenom: jspb.Message.getFieldWithDefault(msg, 10, ""),
    quoteTokenMeta: (f = msg.getQuoteTokenMeta()) && proto.injective_derivative_exchange_rpc.TokenMeta.toObject(includeInstance, f),
    makerFeeRate: jspb.Message.getFieldWithDefault(msg, 12, ""),
    takerFeeRate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    serviceProviderFee: jspb.Message.getFieldWithDefault(msg, 14, ""),
    isPerpetual: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    minPriceTickSize: jspb.Message.getFieldWithDefault(msg, 16, ""),
    minQuantityTickSize: jspb.Message.getFieldWithDefault(msg, 17, ""),
    perpetualMarketInfo: (f = msg.getPerpetualMarketInfo()) && proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.toObject(includeInstance, f),
    perpetualMarketFunding: (f = msg.getPerpetualMarketFunding()) && proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.toObject(includeInstance, f),
    expiryFuturesMarketInfo: (f = msg.getExpiryFuturesMarketInfo()) && proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.DerivativeMarketInfo;
  return proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleBase(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleQuote(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOracleScaleFactor(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitialMarginRatio(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaintenanceMarginRatio(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteDenom(value);
      break;
    case 11:
      var value = new proto.injective_derivative_exchange_rpc.TokenMeta;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.TokenMeta.deserializeBinaryFromReader);
      msg.setQuoteTokenMeta(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerFeeRate(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTakerFeeRate(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceProviderFee(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPerpetual(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinPriceTickSize(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinQuantityTickSize(value);
      break;
    case 18:
      var value = new proto.injective_derivative_exchange_rpc.PerpetualMarketInfo;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.deserializeBinaryFromReader);
      msg.setPerpetualMarketInfo(value);
      break;
    case 19:
      var value = new proto.injective_derivative_exchange_rpc.PerpetualMarketFunding;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.deserializeBinaryFromReader);
      msg.setPerpetualMarketFunding(value);
      break;
    case 20:
      var value = new proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.deserializeBinaryFromReader);
      msg.setExpiryFuturesMarketInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarketStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTicker();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOracleBase();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOracleQuote();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOracleType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOracleScaleFactor();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getInitialMarginRatio();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMaintenanceMarginRatio();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getQuoteDenom();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getQuoteTokenMeta();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.injective_derivative_exchange_rpc.TokenMeta.serializeBinaryToWriter
    );
  }
  f = message.getMakerFeeRate();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTakerFeeRate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getServiceProviderFee();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getIsPerpetual();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getMinPriceTickSize();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getMinQuantityTickSize();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getPerpetualMarketInfo();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.serializeBinaryToWriter
    );
  }
  f = message.getPerpetualMarketFunding();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.serializeBinaryToWriter
    );
  }
  f = message.getExpiryFuturesMarketInfo();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market_status = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getMarketStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setMarketStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ticker = 3;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setTicker = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string oracle_base = 4;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getOracleBase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setOracleBase = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string oracle_quote = 5;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getOracleQuote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setOracleQuote = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string oracle_type = 6;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getOracleType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setOracleType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint32 oracle_scale_factor = 7;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getOracleScaleFactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setOracleScaleFactor = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string initial_margin_ratio = 8;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getInitialMarginRatio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setInitialMarginRatio = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string maintenance_margin_ratio = 9;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getMaintenanceMarginRatio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setMaintenanceMarginRatio = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string quote_denom = 10;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getQuoteDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setQuoteDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional TokenMeta quote_token_meta = 11;
 * @return {?proto.injective_derivative_exchange_rpc.TokenMeta}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getQuoteTokenMeta = function() {
  return /** @type{?proto.injective_derivative_exchange_rpc.TokenMeta} */ (
    jspb.Message.getWrapperField(this, proto.injective_derivative_exchange_rpc.TokenMeta, 11));
};


/**
 * @param {?proto.injective_derivative_exchange_rpc.TokenMeta|undefined} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
*/
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setQuoteTokenMeta = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.clearQuoteTokenMeta = function() {
  return this.setQuoteTokenMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.hasQuoteTokenMeta = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string maker_fee_rate = 12;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getMakerFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setMakerFeeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string taker_fee_rate = 13;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getTakerFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setTakerFeeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string service_provider_fee = 14;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getServiceProviderFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setServiceProviderFee = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bool is_perpetual = 15;
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getIsPerpetual = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setIsPerpetual = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional string min_price_tick_size = 16;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getMinPriceTickSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setMinPriceTickSize = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string min_quantity_tick_size = 17;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getMinQuantityTickSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setMinQuantityTickSize = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional PerpetualMarketInfo perpetual_market_info = 18;
 * @return {?proto.injective_derivative_exchange_rpc.PerpetualMarketInfo}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getPerpetualMarketInfo = function() {
  return /** @type{?proto.injective_derivative_exchange_rpc.PerpetualMarketInfo} */ (
    jspb.Message.getWrapperField(this, proto.injective_derivative_exchange_rpc.PerpetualMarketInfo, 18));
};


/**
 * @param {?proto.injective_derivative_exchange_rpc.PerpetualMarketInfo|undefined} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
*/
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setPerpetualMarketInfo = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.clearPerpetualMarketInfo = function() {
  return this.setPerpetualMarketInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.hasPerpetualMarketInfo = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional PerpetualMarketFunding perpetual_market_funding = 19;
 * @return {?proto.injective_derivative_exchange_rpc.PerpetualMarketFunding}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getPerpetualMarketFunding = function() {
  return /** @type{?proto.injective_derivative_exchange_rpc.PerpetualMarketFunding} */ (
    jspb.Message.getWrapperField(this, proto.injective_derivative_exchange_rpc.PerpetualMarketFunding, 19));
};


/**
 * @param {?proto.injective_derivative_exchange_rpc.PerpetualMarketFunding|undefined} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
*/
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setPerpetualMarketFunding = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.clearPerpetualMarketFunding = function() {
  return this.setPerpetualMarketFunding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.hasPerpetualMarketFunding = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional ExpiryFuturesMarketInfo expiry_futures_market_info = 20;
 * @return {?proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.getExpiryFuturesMarketInfo = function() {
  return /** @type{?proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo} */ (
    jspb.Message.getWrapperField(this, proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo, 20));
};


/**
 * @param {?proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo|undefined} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
*/
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.setExpiryFuturesMarketInfo = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.clearExpiryFuturesMarketInfo = function() {
  return this.setExpiryFuturesMarketInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.prototype.hasExpiryFuturesMarketInfo = function() {
  return jspb.Message.getField(this, 20) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.TokenMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.TokenMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.TokenMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    logo: jspb.Message.getFieldWithDefault(msg, 4, ""),
    decimals: jspb.Message.getFieldWithDefault(msg, 5, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.TokenMeta}
 */
proto.injective_derivative_exchange_rpc.TokenMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.TokenMeta;
  return proto.injective_derivative_exchange_rpc.TokenMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.TokenMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.TokenMeta}
 */
proto.injective_derivative_exchange_rpc.TokenMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDecimals(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.TokenMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.TokenMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.TokenMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLogo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeSint64(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.TokenMeta} returns this
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.TokenMeta} returns this
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.TokenMeta} returns this
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string logo = 4;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.TokenMeta} returns this
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.setLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional sint32 decimals = 5;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.TokenMeta} returns this
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.setDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint64 updated_at = 6;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.TokenMeta} returns this
 */
proto.injective_derivative_exchange_rpc.TokenMeta.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.PerpetualMarketInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    hourlyFundingRateCap: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hourlyInterestRate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nextFundingTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fundingInterval: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.PerpetualMarketInfo}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.PerpetualMarketInfo;
  return proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.PerpetualMarketInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.PerpetualMarketInfo}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHourlyFundingRateCap(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHourlyInterestRate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setNextFundingTimestamp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setFundingInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.PerpetualMarketInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHourlyFundingRateCap();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHourlyInterestRate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNextFundingTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
  f = message.getFundingInterval();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
};


/**
 * optional string hourly_funding_rate_cap = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.prototype.getHourlyFundingRateCap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.PerpetualMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.prototype.setHourlyFundingRateCap = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hourly_interest_rate = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.prototype.getHourlyInterestRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.PerpetualMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.prototype.setHourlyInterestRate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 next_funding_timestamp = 3;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.prototype.getNextFundingTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.PerpetualMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.prototype.setNextFundingTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sint64 funding_interval = 4;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.prototype.getFundingInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.PerpetualMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketInfo.prototype.setFundingInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.PerpetualMarketFunding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.toObject = function(includeInstance, msg) {
  var f, obj = {
    cumulativeFunding: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cumulativePrice: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.PerpetualMarketFunding}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.PerpetualMarketFunding;
  return proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.PerpetualMarketFunding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.PerpetualMarketFunding}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCumulativeFunding(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCumulativePrice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setLastTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.PerpetualMarketFunding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCumulativeFunding();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCumulativePrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
};


/**
 * optional string cumulative_funding = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.prototype.getCumulativeFunding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.PerpetualMarketFunding} returns this
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.prototype.setCumulativeFunding = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cumulative_price = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.prototype.getCumulativePrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.PerpetualMarketFunding} returns this
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.prototype.setCumulativePrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 last_timestamp = 3;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.prototype.getLastTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.PerpetualMarketFunding} returns this
 */
proto.injective_derivative_exchange_rpc.PerpetualMarketFunding.prototype.setLastTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    expirationTimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    settlementPrice: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo}
 */
proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo;
  return proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo}
 */
proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setExpirationTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettlementPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpirationTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      1,
      f
    );
  }
  f = message.getSettlementPrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional sint64 expiration_timestamp = 1;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.prototype.getExpirationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.prototype.setExpirationTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string settlement_price = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.prototype.getSettlementPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo} returns this
 */
proto.injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.prototype.setSettlementPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.MarketRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.MarketRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.MarketRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.MarketRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.MarketRequest}
 */
proto.injective_derivative_exchange_rpc.MarketRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.MarketRequest;
  return proto.injective_derivative_exchange_rpc.MarketRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.MarketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.MarketRequest}
 */
proto.injective_derivative_exchange_rpc.MarketRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.MarketRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.MarketRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.MarketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.MarketRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.MarketRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.MarketRequest} returns this
 */
proto.injective_derivative_exchange_rpc.MarketRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.MarketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.MarketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.MarketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.MarketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: (f = msg.getMarket()) && proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.MarketResponse}
 */
proto.injective_derivative_exchange_rpc.MarketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.MarketResponse;
  return proto.injective_derivative_exchange_rpc.MarketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.MarketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.MarketResponse}
 */
proto.injective_derivative_exchange_rpc.MarketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativeMarketInfo;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.deserializeBinaryFromReader);
      msg.setMarket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.MarketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.MarketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.MarketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.MarketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional DerivativeMarketInfo market = 1;
 * @return {?proto.injective_derivative_exchange_rpc.DerivativeMarketInfo}
 */
proto.injective_derivative_exchange_rpc.MarketResponse.prototype.getMarket = function() {
  return /** @type{?proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} */ (
    jspb.Message.getWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativeMarketInfo, 1));
};


/**
 * @param {?proto.injective_derivative_exchange_rpc.DerivativeMarketInfo|undefined} value
 * @return {!proto.injective_derivative_exchange_rpc.MarketResponse} returns this
*/
proto.injective_derivative_exchange_rpc.MarketResponse.prototype.setMarket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_derivative_exchange_rpc.MarketResponse} returns this
 */
proto.injective_derivative_exchange_rpc.MarketResponse.prototype.clearMarket = function() {
  return this.setMarket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.MarketResponse.prototype.hasMarket = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_derivative_exchange_rpc.StreamMarketRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.StreamMarketRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.StreamMarketRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.StreamMarketRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamMarketRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.StreamMarketRequest}
 */
proto.injective_derivative_exchange_rpc.StreamMarketRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.StreamMarketRequest;
  return proto.injective_derivative_exchange_rpc.StreamMarketRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.StreamMarketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.StreamMarketRequest}
 */
proto.injective_derivative_exchange_rpc.StreamMarketRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addMarketIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.StreamMarketRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.StreamMarketRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.StreamMarketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamMarketRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string market_ids = 1;
 * @return {!Array<string>}
 */
proto.injective_derivative_exchange_rpc.StreamMarketRequest.prototype.getMarketIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamMarketRequest} returns this
 */
proto.injective_derivative_exchange_rpc.StreamMarketRequest.prototype.setMarketIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective_derivative_exchange_rpc.StreamMarketRequest} returns this
 */
proto.injective_derivative_exchange_rpc.StreamMarketRequest.prototype.addMarketIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_derivative_exchange_rpc.StreamMarketRequest} returns this
 */
proto.injective_derivative_exchange_rpc.StreamMarketRequest.prototype.clearMarketIdsList = function() {
  return this.setMarketIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.StreamMarketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.StreamMarketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: (f = msg.getMarket()) && proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.toObject(includeInstance, f),
    operationType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.StreamMarketResponse}
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.StreamMarketResponse;
  return proto.injective_derivative_exchange_rpc.StreamMarketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.StreamMarketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.StreamMarketResponse}
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativeMarketInfo;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.deserializeBinaryFromReader);
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.StreamMarketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.StreamMarketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativeMarketInfo.serializeBinaryToWriter
    );
  }
  f = message.getOperationType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
};


/**
 * optional DerivativeMarketInfo market = 1;
 * @return {?proto.injective_derivative_exchange_rpc.DerivativeMarketInfo}
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse.prototype.getMarket = function() {
  return /** @type{?proto.injective_derivative_exchange_rpc.DerivativeMarketInfo} */ (
    jspb.Message.getWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativeMarketInfo, 1));
};


/**
 * @param {?proto.injective_derivative_exchange_rpc.DerivativeMarketInfo|undefined} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamMarketResponse} returns this
*/
proto.injective_derivative_exchange_rpc.StreamMarketResponse.prototype.setMarket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_derivative_exchange_rpc.StreamMarketResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse.prototype.clearMarket = function() {
  return this.setMarket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse.prototype.hasMarket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string operation_type = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse.prototype.getOperationType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamMarketResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse.prototype.setOperationType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 timestamp = 3;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamMarketResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamMarketResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.OrderbookRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.OrderbookRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.OrderbookRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.OrderbookRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.OrderbookRequest}
 */
proto.injective_derivative_exchange_rpc.OrderbookRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.OrderbookRequest;
  return proto.injective_derivative_exchange_rpc.OrderbookRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.OrderbookRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.OrderbookRequest}
 */
proto.injective_derivative_exchange_rpc.OrderbookRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.OrderbookRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.OrderbookRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.OrderbookRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.OrderbookRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.OrderbookRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.OrderbookRequest} returns this
 */
proto.injective_derivative_exchange_rpc.OrderbookRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.OrderbookResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.OrderbookResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.OrderbookResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.OrderbookResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderbook: (f = msg.getOrderbook()) && proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.OrderbookResponse}
 */
proto.injective_derivative_exchange_rpc.OrderbookResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.OrderbookResponse;
  return proto.injective_derivative_exchange_rpc.OrderbookResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.OrderbookResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.OrderbookResponse}
 */
proto.injective_derivative_exchange_rpc.OrderbookResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.deserializeBinaryFromReader);
      msg.setOrderbook(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.OrderbookResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.OrderbookResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.OrderbookResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.OrderbookResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderbook();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.serializeBinaryToWriter
    );
  }
};


/**
 * optional DerivativeLimitOrderbook orderbook = 1;
 * @return {?proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook}
 */
proto.injective_derivative_exchange_rpc.OrderbookResponse.prototype.getOrderbook = function() {
  return /** @type{?proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook} */ (
    jspb.Message.getWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook, 1));
};


/**
 * @param {?proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook|undefined} value
 * @return {!proto.injective_derivative_exchange_rpc.OrderbookResponse} returns this
*/
proto.injective_derivative_exchange_rpc.OrderbookResponse.prototype.setOrderbook = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_derivative_exchange_rpc.OrderbookResponse} returns this
 */
proto.injective_derivative_exchange_rpc.OrderbookResponse.prototype.clearOrderbook = function() {
  return this.setOrderbook(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.OrderbookResponse.prototype.hasOrderbook = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.toObject = function(includeInstance, msg) {
  var f, obj = {
    buysList: jspb.Message.toObjectList(msg.getBuysList(),
    proto.injective_derivative_exchange_rpc.PriceLevel.toObject, includeInstance),
    sellsList: jspb.Message.toObjectList(msg.getSellsList(),
    proto.injective_derivative_exchange_rpc.PriceLevel.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook;
  return proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.PriceLevel;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.PriceLevel.deserializeBinaryFromReader);
      msg.addBuys(value);
      break;
    case 2:
      var value = new proto.injective_derivative_exchange_rpc.PriceLevel;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.PriceLevel.deserializeBinaryFromReader);
      msg.addSells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBuysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.PriceLevel.serializeBinaryToWriter
    );
  }
  f = message.getSellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.injective_derivative_exchange_rpc.PriceLevel.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PriceLevel buys = 1;
 * @return {!Array<!proto.injective_derivative_exchange_rpc.PriceLevel>}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.prototype.getBuysList = function() {
  return /** @type{!Array<!proto.injective_derivative_exchange_rpc.PriceLevel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_derivative_exchange_rpc.PriceLevel, 1));
};


/**
 * @param {!Array<!proto.injective_derivative_exchange_rpc.PriceLevel>} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook} returns this
*/
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.prototype.setBuysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_derivative_exchange_rpc.PriceLevel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_derivative_exchange_rpc.PriceLevel}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.prototype.addBuys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_derivative_exchange_rpc.PriceLevel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.prototype.clearBuysList = function() {
  return this.setBuysList([]);
};


/**
 * repeated PriceLevel sells = 2;
 * @return {!Array<!proto.injective_derivative_exchange_rpc.PriceLevel>}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.prototype.getSellsList = function() {
  return /** @type{!Array<!proto.injective_derivative_exchange_rpc.PriceLevel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_derivative_exchange_rpc.PriceLevel, 2));
};


/**
 * @param {!Array<!proto.injective_derivative_exchange_rpc.PriceLevel>} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook} returns this
*/
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.prototype.setSellsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.injective_derivative_exchange_rpc.PriceLevel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_derivative_exchange_rpc.PriceLevel}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.prototype.addSells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.injective_derivative_exchange_rpc.PriceLevel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.prototype.clearSellsList = function() {
  return this.setSellsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.PriceLevel.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.PriceLevel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.PriceLevel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.PriceLevel.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.PriceLevel}
 */
proto.injective_derivative_exchange_rpc.PriceLevel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.PriceLevel;
  return proto.injective_derivative_exchange_rpc.PriceLevel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.PriceLevel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.PriceLevel}
 */
proto.injective_derivative_exchange_rpc.PriceLevel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.PriceLevel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.PriceLevel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.PriceLevel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.PriceLevel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
};


/**
 * optional string price = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.PriceLevel.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.PriceLevel} returns this
 */
proto.injective_derivative_exchange_rpc.PriceLevel.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string quantity = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.PriceLevel.prototype.getQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.PriceLevel} returns this
 */
proto.injective_derivative_exchange_rpc.PriceLevel.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 timestamp = 3;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.PriceLevel.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.PriceLevel} returns this
 */
proto.injective_derivative_exchange_rpc.PriceLevel.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.StreamOrderbookRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.StreamOrderbookRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrderbookRequest}
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.StreamOrderbookRequest;
  return proto.injective_derivative_exchange_rpc.StreamOrderbookRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.StreamOrderbookRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrderbookRequest}
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.StreamOrderbookRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.StreamOrderbookRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrderbookRequest} returns this
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.StreamOrderbookResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderbook: (f = msg.getOrderbook()) && proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.toObject(includeInstance, f),
    operationType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrderbookResponse}
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.StreamOrderbookResponse;
  return proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.StreamOrderbookResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrderbookResponse}
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.deserializeBinaryFromReader);
      msg.setOrderbook(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.StreamOrderbookResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderbook();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook.serializeBinaryToWriter
    );
  }
  f = message.getOperationType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
};


/**
 * optional DerivativeLimitOrderbook orderbook = 1;
 * @return {?proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook}
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.prototype.getOrderbook = function() {
  return /** @type{?proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook} */ (
    jspb.Message.getWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook, 1));
};


/**
 * @param {?proto.injective_derivative_exchange_rpc.DerivativeLimitOrderbook|undefined} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrderbookResponse} returns this
*/
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.prototype.setOrderbook = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrderbookResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.prototype.clearOrderbook = function() {
  return this.setOrderbook(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.prototype.hasOrderbook = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string operation_type = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.prototype.getOperationType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrderbookResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.prototype.setOperationType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 timestamp = 3;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrderbookResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamOrderbookResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.OrdersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.OrdersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.OrdersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.OrdersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orderSide: jspb.Message.getFieldWithDefault(msg, 2, ""),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.OrdersRequest}
 */
proto.injective_derivative_exchange_rpc.OrdersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.OrdersRequest;
  return proto.injective_derivative_exchange_rpc.OrdersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.OrdersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.OrdersRequest}
 */
proto.injective_derivative_exchange_rpc.OrdersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderSide(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.OrdersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.OrdersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.OrdersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.OrdersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrderSide();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.OrdersRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.OrdersRequest} returns this
 */
proto.injective_derivative_exchange_rpc.OrdersRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string order_side = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.OrdersRequest.prototype.getOrderSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.OrdersRequest} returns this
 */
proto.injective_derivative_exchange_rpc.OrdersRequest.prototype.setOrderSide = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string subaccount_id = 3;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.OrdersRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.OrdersRequest} returns this
 */
proto.injective_derivative_exchange_rpc.OrdersRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_derivative_exchange_rpc.OrdersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.OrdersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.OrdersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.OrdersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.OrdersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.OrdersResponse}
 */
proto.injective_derivative_exchange_rpc.OrdersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.OrdersResponse;
  return proto.injective_derivative_exchange_rpc.OrdersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.OrdersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.OrdersResponse}
 */
proto.injective_derivative_exchange_rpc.OrdersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativeLimitOrder;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.OrdersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.OrdersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.OrdersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.OrdersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DerivativeLimitOrder orders = 1;
 * @return {!Array<!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder>}
 */
proto.injective_derivative_exchange_rpc.OrdersResponse.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativeLimitOrder, 1));
};


/**
 * @param {!Array<!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder>} value
 * @return {!proto.injective_derivative_exchange_rpc.OrdersResponse} returns this
*/
proto.injective_derivative_exchange_rpc.OrdersResponse.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder}
 */
proto.injective_derivative_exchange_rpc.OrdersResponse.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_derivative_exchange_rpc.DerivativeLimitOrder, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_derivative_exchange_rpc.OrdersResponse} returns this
 */
proto.injective_derivative_exchange_rpc.OrdersResponse.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orderSide: jspb.Message.getFieldWithDefault(msg, 2, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isReduceOnly: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    margin: jspb.Message.getFieldWithDefault(msg, 6, ""),
    price: jspb.Message.getFieldWithDefault(msg, 7, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 8, ""),
    unfilledQuantity: jspb.Message.getFieldWithDefault(msg, 9, ""),
    triggerPrice: jspb.Message.getFieldWithDefault(msg, 10, ""),
    feeRecipient: jspb.Message.getFieldWithDefault(msg, 11, ""),
    state: jspb.Message.getFieldWithDefault(msg, 12, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 13, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.DerivativeLimitOrder;
  return proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderSide(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsReduceOnly(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMargin(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuantity(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnfilledQuantity(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTriggerPrice(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeeRecipient(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setCreatedAt(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrderSide();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsReduceOnly();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMargin();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getQuantity();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUnfilledQuantity();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTriggerPrice();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFeeRecipient();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeSint64(
      13,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeSint64(
      14,
      f
    );
  }
};


/**
 * optional string order_hash = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getOrderHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setOrderHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string order_side = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getOrderSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setOrderSide = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string market_id = 3;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string subaccount_id = 4;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool is_reduce_only = 5;
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getIsReduceOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setIsReduceOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string margin = 6;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getMargin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setMargin = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string price = 7;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string quantity = 8;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string unfilled_quantity = 9;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getUnfilledQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setUnfilledQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string trigger_price = 10;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getTriggerPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setTriggerPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string fee_recipient = 11;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getFeeRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setFeeRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string state = 12;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional sint64 created_at = 13;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional sint64 updated_at = 14;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.PositionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.PositionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.PositionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.PositionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.PositionsRequest}
 */
proto.injective_derivative_exchange_rpc.PositionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.PositionsRequest;
  return proto.injective_derivative_exchange_rpc.PositionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.PositionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.PositionsRequest}
 */
proto.injective_derivative_exchange_rpc.PositionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.PositionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.PositionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.PositionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.PositionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.PositionsRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.PositionsRequest} returns this
 */
proto.injective_derivative_exchange_rpc.PositionsRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market_id = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.PositionsRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.PositionsRequest} returns this
 */
proto.injective_derivative_exchange_rpc.PositionsRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_derivative_exchange_rpc.PositionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.PositionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.PositionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.PositionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.PositionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionsList: jspb.Message.toObjectList(msg.getPositionsList(),
    proto.injective_derivative_exchange_rpc.DerivativePosition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.PositionsResponse}
 */
proto.injective_derivative_exchange_rpc.PositionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.PositionsResponse;
  return proto.injective_derivative_exchange_rpc.PositionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.PositionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.PositionsResponse}
 */
proto.injective_derivative_exchange_rpc.PositionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativePosition;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativePosition.deserializeBinaryFromReader);
      msg.addPositions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.PositionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.PositionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.PositionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.PositionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativePosition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DerivativePosition positions = 1;
 * @return {!Array<!proto.injective_derivative_exchange_rpc.DerivativePosition>}
 */
proto.injective_derivative_exchange_rpc.PositionsResponse.prototype.getPositionsList = function() {
  return /** @type{!Array<!proto.injective_derivative_exchange_rpc.DerivativePosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativePosition, 1));
};


/**
 * @param {!Array<!proto.injective_derivative_exchange_rpc.DerivativePosition>} value
 * @return {!proto.injective_derivative_exchange_rpc.PositionsResponse} returns this
*/
proto.injective_derivative_exchange_rpc.PositionsResponse.prototype.setPositionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_derivative_exchange_rpc.DerivativePosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition}
 */
proto.injective_derivative_exchange_rpc.PositionsResponse.prototype.addPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_derivative_exchange_rpc.DerivativePosition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_derivative_exchange_rpc.PositionsResponse} returns this
 */
proto.injective_derivative_exchange_rpc.PositionsResponse.prototype.clearPositionsList = function() {
  return this.setPositionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.DerivativePosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.DerivativePosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticker: jspb.Message.getFieldWithDefault(msg, 1, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 4, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 5, ""),
    entryPrice: jspb.Message.getFieldWithDefault(msg, 6, ""),
    margin: jspb.Message.getFieldWithDefault(msg, 7, ""),
    liquidationPrice: jspb.Message.getFieldWithDefault(msg, 8, ""),
    markPrice: jspb.Message.getFieldWithDefault(msg, 9, ""),
    aggregateReduceOnlyQuantity: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.DerivativePosition;
  return proto.injective_derivative_exchange_rpc.DerivativePosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.DerivativePosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuantity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryPrice(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMargin(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiquidationPrice(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarkPrice(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAggregateReduceOnlyQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.DerivativePosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.DerivativePosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicker();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getQuantity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEntryPrice();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMargin();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLiquidationPrice();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMarkPrice();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAggregateReduceOnlyQuantity();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string ticker = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.getTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.setTicker = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market_id = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string subaccount_id = 3;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string direction = 4;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string quantity = 5;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.getQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string entry_price = 6;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.getEntryPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.setEntryPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string margin = 7;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.getMargin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.setMargin = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string liquidation_price = 8;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.getLiquidationPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.setLiquidationPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string mark_price = 9;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.getMarkPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.setMarkPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string aggregate_reduce_only_quantity = 11;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.getAggregateReduceOnlyQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativePosition.prototype.setAggregateReduceOnlyQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest}
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest;
  return proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest}
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest} returns this
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionsList: jspb.Message.toObjectList(msg.getPositionsList(),
    proto.injective_derivative_exchange_rpc.DerivativePosition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse}
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse;
  return proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse}
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativePosition;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativePosition.deserializeBinaryFromReader);
      msg.addPositions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativePosition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DerivativePosition positions = 1;
 * @return {!Array<!proto.injective_derivative_exchange_rpc.DerivativePosition>}
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.prototype.getPositionsList = function() {
  return /** @type{!Array<!proto.injective_derivative_exchange_rpc.DerivativePosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativePosition, 1));
};


/**
 * @param {!Array<!proto.injective_derivative_exchange_rpc.DerivativePosition>} value
 * @return {!proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse} returns this
*/
proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.prototype.setPositionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_derivative_exchange_rpc.DerivativePosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_derivative_exchange_rpc.DerivativePosition}
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.prototype.addPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_derivative_exchange_rpc.DerivativePosition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse} returns this
 */
proto.injective_derivative_exchange_rpc.LiquidablePositionsResponse.prototype.clearPositionsList = function() {
  return this.setPositionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.FundingPaymentsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.FundingPaymentsRequest}
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.FundingPaymentsRequest;
  return proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.FundingPaymentsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.FundingPaymentsRequest}
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.FundingPaymentsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.FundingPaymentsRequest} returns this
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market_id = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.FundingPaymentsRequest} returns this
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.FundingPaymentsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentsList: jspb.Message.toObjectList(msg.getPaymentsList(),
    proto.injective_derivative_exchange_rpc.FundingPayment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.FundingPaymentsResponse}
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.FundingPaymentsResponse;
  return proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.FundingPaymentsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.FundingPaymentsResponse}
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.FundingPayment;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.FundingPayment.deserializeBinaryFromReader);
      msg.addPayments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.FundingPaymentsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.FundingPayment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FundingPayment payments = 1;
 * @return {!Array<!proto.injective_derivative_exchange_rpc.FundingPayment>}
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.prototype.getPaymentsList = function() {
  return /** @type{!Array<!proto.injective_derivative_exchange_rpc.FundingPayment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_derivative_exchange_rpc.FundingPayment, 1));
};


/**
 * @param {!Array<!proto.injective_derivative_exchange_rpc.FundingPayment>} value
 * @return {!proto.injective_derivative_exchange_rpc.FundingPaymentsResponse} returns this
*/
proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.prototype.setPaymentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_derivative_exchange_rpc.FundingPayment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_derivative_exchange_rpc.FundingPayment}
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.prototype.addPayments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_derivative_exchange_rpc.FundingPayment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_derivative_exchange_rpc.FundingPaymentsResponse} returns this
 */
proto.injective_derivative_exchange_rpc.FundingPaymentsResponse.prototype.clearPaymentsList = function() {
  return this.setPaymentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.FundingPayment.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.FundingPayment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.FundingPayment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.FundingPayment.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.FundingPayment}
 */
proto.injective_derivative_exchange_rpc.FundingPayment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.FundingPayment;
  return proto.injective_derivative_exchange_rpc.FundingPayment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.FundingPayment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.FundingPayment}
 */
proto.injective_derivative_exchange_rpc.FundingPayment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.FundingPayment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.FundingPayment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.FundingPayment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.FundingPayment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.FundingPayment.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.FundingPayment} returns this
 */
proto.injective_derivative_exchange_rpc.FundingPayment.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string subaccount_id = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.FundingPayment.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.FundingPayment} returns this
 */
proto.injective_derivative_exchange_rpc.FundingPayment.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.FundingPayment.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.FundingPayment} returns this
 */
proto.injective_derivative_exchange_rpc.FundingPayment.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional sint64 timestamp = 4;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.FundingPayment.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.FundingPayment} returns this
 */
proto.injective_derivative_exchange_rpc.FundingPayment.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.StreamPositionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.StreamPositionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.StreamPositionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamPositionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.StreamPositionsRequest}
 */
proto.injective_derivative_exchange_rpc.StreamPositionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.StreamPositionsRequest;
  return proto.injective_derivative_exchange_rpc.StreamPositionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.StreamPositionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.StreamPositionsRequest}
 */
proto.injective_derivative_exchange_rpc.StreamPositionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.StreamPositionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.StreamPositionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.StreamPositionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamPositionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamPositionsRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamPositionsRequest} returns this
 */
proto.injective_derivative_exchange_rpc.StreamPositionsRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market_id = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamPositionsRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamPositionsRequest} returns this
 */
proto.injective_derivative_exchange_rpc.StreamPositionsRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.StreamPositionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.StreamPositionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.StreamPositionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamPositionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.injective_derivative_exchange_rpc.DerivativePosition.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.StreamPositionsResponse}
 */
proto.injective_derivative_exchange_rpc.StreamPositionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.StreamPositionsResponse;
  return proto.injective_derivative_exchange_rpc.StreamPositionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.StreamPositionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.StreamPositionsResponse}
 */
proto.injective_derivative_exchange_rpc.StreamPositionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativePosition;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativePosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.StreamPositionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.StreamPositionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.StreamPositionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamPositionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativePosition.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
};


/**
 * optional DerivativePosition position = 1;
 * @return {?proto.injective_derivative_exchange_rpc.DerivativePosition}
 */
proto.injective_derivative_exchange_rpc.StreamPositionsResponse.prototype.getPosition = function() {
  return /** @type{?proto.injective_derivative_exchange_rpc.DerivativePosition} */ (
    jspb.Message.getWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativePosition, 1));
};


/**
 * @param {?proto.injective_derivative_exchange_rpc.DerivativePosition|undefined} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamPositionsResponse} returns this
*/
proto.injective_derivative_exchange_rpc.StreamPositionsResponse.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_derivative_exchange_rpc.StreamPositionsResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamPositionsResponse.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.StreamPositionsResponse.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint64 timestamp = 2;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.StreamPositionsResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamPositionsResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamPositionsResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.StreamOrdersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.StreamOrdersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamOrdersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orderSide: jspb.Message.getFieldWithDefault(msg, 2, ""),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrdersRequest}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.StreamOrdersRequest;
  return proto.injective_derivative_exchange_rpc.StreamOrdersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.StreamOrdersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrdersRequest}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderSide(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.StreamOrdersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.StreamOrdersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamOrdersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrderSide();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrdersRequest} returns this
 */
proto.injective_derivative_exchange_rpc.StreamOrdersRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string order_side = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersRequest.prototype.getOrderSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrdersRequest} returns this
 */
proto.injective_derivative_exchange_rpc.StreamOrdersRequest.prototype.setOrderSide = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string subaccount_id = 3;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrdersRequest} returns this
 */
proto.injective_derivative_exchange_rpc.StreamOrdersRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.StreamOrdersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.StreamOrdersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    order: (f = msg.getOrder()) && proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.toObject(includeInstance, f),
    operationType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrdersResponse}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.StreamOrdersResponse;
  return proto.injective_derivative_exchange_rpc.StreamOrdersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.StreamOrdersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrdersResponse}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativeLimitOrder;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.deserializeBinaryFromReader);
      msg.setOrder(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.StreamOrdersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.StreamOrdersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.serializeBinaryToWriter
    );
  }
  f = message.getOperationType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
};


/**
 * optional DerivativeLimitOrder order = 1;
 * @return {?proto.injective_derivative_exchange_rpc.DerivativeLimitOrder}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.prototype.getOrder = function() {
  return /** @type{?proto.injective_derivative_exchange_rpc.DerivativeLimitOrder} */ (
    jspb.Message.getWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativeLimitOrder, 1));
};


/**
 * @param {?proto.injective_derivative_exchange_rpc.DerivativeLimitOrder|undefined} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrdersResponse} returns this
*/
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.prototype.setOrder = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrdersResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.prototype.clearOrder = function() {
  return this.setOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string operation_type = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.prototype.getOperationType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrdersResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.prototype.setOperationType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 timestamp = 3;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamOrdersResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamOrdersResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.TradesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.TradesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.TradesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.TradesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    executionSide: jspb.Message.getFieldWithDefault(msg, 2, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 3, ""),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.TradesRequest}
 */
proto.injective_derivative_exchange_rpc.TradesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.TradesRequest;
  return proto.injective_derivative_exchange_rpc.TradesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.TradesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.TradesRequest}
 */
proto.injective_derivative_exchange_rpc.TradesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionSide(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.TradesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.TradesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.TradesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.TradesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExecutionSide();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.TradesRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.TradesRequest} returns this
 */
proto.injective_derivative_exchange_rpc.TradesRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string execution_side = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.TradesRequest.prototype.getExecutionSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.TradesRequest} returns this
 */
proto.injective_derivative_exchange_rpc.TradesRequest.prototype.setExecutionSide = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string direction = 3;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.TradesRequest.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.TradesRequest} returns this
 */
proto.injective_derivative_exchange_rpc.TradesRequest.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string subaccount_id = 4;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.TradesRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.TradesRequest} returns this
 */
proto.injective_derivative_exchange_rpc.TradesRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_derivative_exchange_rpc.TradesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.TradesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.TradesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.TradesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.TradesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradesList: jspb.Message.toObjectList(msg.getTradesList(),
    proto.injective_derivative_exchange_rpc.DerivativeTrade.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.TradesResponse}
 */
proto.injective_derivative_exchange_rpc.TradesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.TradesResponse;
  return proto.injective_derivative_exchange_rpc.TradesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.TradesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.TradesResponse}
 */
proto.injective_derivative_exchange_rpc.TradesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativeTrade;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativeTrade.deserializeBinaryFromReader);
      msg.addTrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.TradesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.TradesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.TradesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.TradesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativeTrade.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DerivativeTrade trades = 1;
 * @return {!Array<!proto.injective_derivative_exchange_rpc.DerivativeTrade>}
 */
proto.injective_derivative_exchange_rpc.TradesResponse.prototype.getTradesList = function() {
  return /** @type{!Array<!proto.injective_derivative_exchange_rpc.DerivativeTrade>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativeTrade, 1));
};


/**
 * @param {!Array<!proto.injective_derivative_exchange_rpc.DerivativeTrade>} value
 * @return {!proto.injective_derivative_exchange_rpc.TradesResponse} returns this
*/
proto.injective_derivative_exchange_rpc.TradesResponse.prototype.setTradesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeTrade=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade}
 */
proto.injective_derivative_exchange_rpc.TradesResponse.prototype.addTrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_derivative_exchange_rpc.DerivativeTrade, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_derivative_exchange_rpc.TradesResponse} returns this
 */
proto.injective_derivative_exchange_rpc.TradesResponse.prototype.clearTradesList = function() {
  return this.setTradesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.DerivativeTrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeTrade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tradeExecutionType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isLiquidation: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    positionDelta: (f = msg.getPositionDelta()) && proto.injective_derivative_exchange_rpc.PositionDelta.toObject(includeInstance, f),
    payout: jspb.Message.getFieldWithDefault(msg, 7, ""),
    fee: jspb.Message.getFieldWithDefault(msg, 8, ""),
    executedAt: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.DerivativeTrade;
  return proto.injective_derivative_exchange_rpc.DerivativeTrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeTrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeExecutionType(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLiquidation(value);
      break;
    case 6:
      var value = new proto.injective_derivative_exchange_rpc.PositionDelta;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.PositionDelta.deserializeBinaryFromReader);
      msg.setPositionDelta(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayout(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFee(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.DerivativeTrade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeTrade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTradeExecutionType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsLiquidation();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getPositionDelta();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.injective_derivative_exchange_rpc.PositionDelta.serializeBinaryToWriter
    );
  }
  f = message.getPayout();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getFee();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getExecutedAt();
  if (f !== 0) {
    writer.writeSint64(
      9,
      f
    );
  }
};


/**
 * optional string order_hash = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.getOrderHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.setOrderHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string subaccount_id = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string market_id = 3;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string trade_execution_type = 4;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.getTradeExecutionType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.setTradeExecutionType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool is_liquidation = 5;
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.getIsLiquidation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.setIsLiquidation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional PositionDelta position_delta = 6;
 * @return {?proto.injective_derivative_exchange_rpc.PositionDelta}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.getPositionDelta = function() {
  return /** @type{?proto.injective_derivative_exchange_rpc.PositionDelta} */ (
    jspb.Message.getWrapperField(this, proto.injective_derivative_exchange_rpc.PositionDelta, 6));
};


/**
 * @param {?proto.injective_derivative_exchange_rpc.PositionDelta|undefined} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade} returns this
*/
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.setPositionDelta = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.clearPositionDelta = function() {
  return this.setPositionDelta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.hasPositionDelta = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string payout = 7;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.getPayout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.setPayout = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string fee = 8;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.setFee = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional sint64 executed_at = 9;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.getExecutedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade} returns this
 */
proto.injective_derivative_exchange_rpc.DerivativeTrade.prototype.setExecutedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.PositionDelta.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.PositionDelta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.PositionDelta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.PositionDelta.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradeDirection: jspb.Message.getFieldWithDefault(msg, 1, ""),
    executionPrice: jspb.Message.getFieldWithDefault(msg, 2, ""),
    executionQuantity: jspb.Message.getFieldWithDefault(msg, 3, ""),
    executionMargin: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.PositionDelta}
 */
proto.injective_derivative_exchange_rpc.PositionDelta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.PositionDelta;
  return proto.injective_derivative_exchange_rpc.PositionDelta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.PositionDelta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.PositionDelta}
 */
proto.injective_derivative_exchange_rpc.PositionDelta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeDirection(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionPrice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionQuantity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionMargin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.PositionDelta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.PositionDelta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.PositionDelta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.PositionDelta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradeDirection();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExecutionPrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExecutionQuantity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExecutionMargin();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string trade_direction = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.PositionDelta.prototype.getTradeDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.PositionDelta} returns this
 */
proto.injective_derivative_exchange_rpc.PositionDelta.prototype.setTradeDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string execution_price = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.PositionDelta.prototype.getExecutionPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.PositionDelta} returns this
 */
proto.injective_derivative_exchange_rpc.PositionDelta.prototype.setExecutionPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string execution_quantity = 3;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.PositionDelta.prototype.getExecutionQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.PositionDelta} returns this
 */
proto.injective_derivative_exchange_rpc.PositionDelta.prototype.setExecutionQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string execution_margin = 4;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.PositionDelta.prototype.getExecutionMargin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.PositionDelta} returns this
 */
proto.injective_derivative_exchange_rpc.PositionDelta.prototype.setExecutionMargin = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.StreamTradesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.StreamTradesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    executionSide: jspb.Message.getFieldWithDefault(msg, 2, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 3, ""),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.StreamTradesRequest}
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.StreamTradesRequest;
  return proto.injective_derivative_exchange_rpc.StreamTradesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.StreamTradesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.StreamTradesRequest}
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionSide(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.StreamTradesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.StreamTradesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExecutionSide();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamTradesRequest} returns this
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string execution_side = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.prototype.getExecutionSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamTradesRequest} returns this
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.prototype.setExecutionSide = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string direction = 3;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamTradesRequest} returns this
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string subaccount_id = 4;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamTradesRequest} returns this
 */
proto.injective_derivative_exchange_rpc.StreamTradesRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.StreamTradesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.StreamTradesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    trade: (f = msg.getTrade()) && proto.injective_derivative_exchange_rpc.DerivativeTrade.toObject(includeInstance, f),
    operationType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.StreamTradesResponse}
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.StreamTradesResponse;
  return proto.injective_derivative_exchange_rpc.StreamTradesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.StreamTradesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.StreamTradesResponse}
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativeTrade;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativeTrade.deserializeBinaryFromReader);
      msg.setTrade(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.StreamTradesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.StreamTradesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrade();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativeTrade.serializeBinaryToWriter
    );
  }
  f = message.getOperationType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
};


/**
 * optional DerivativeTrade trade = 1;
 * @return {?proto.injective_derivative_exchange_rpc.DerivativeTrade}
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse.prototype.getTrade = function() {
  return /** @type{?proto.injective_derivative_exchange_rpc.DerivativeTrade} */ (
    jspb.Message.getWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativeTrade, 1));
};


/**
 * @param {?proto.injective_derivative_exchange_rpc.DerivativeTrade|undefined} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamTradesResponse} returns this
*/
proto.injective_derivative_exchange_rpc.StreamTradesResponse.prototype.setTrade = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_derivative_exchange_rpc.StreamTradesResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse.prototype.clearTrade = function() {
  return this.setTrade(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse.prototype.hasTrade = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string operation_type = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse.prototype.getOperationType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamTradesResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse.prototype.setOperationType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 timestamp = 3;
 * @return {number}
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_derivative_exchange_rpc.StreamTradesResponse} returns this
 */
proto.injective_derivative_exchange_rpc.StreamTradesResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest}
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest;
  return proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest}
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest} returns this
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market_id = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest} returns this
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse}
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse;
  return proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse}
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativeLimitOrder;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativeLimitOrder.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DerivativeLimitOrder orders = 1;
 * @return {!Array<!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder>}
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativeLimitOrder, 1));
};


/**
 * @param {!Array<!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder>} value
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse} returns this
*/
proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeLimitOrder}
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_derivative_exchange_rpc.DerivativeLimitOrder, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse} returns this
 */
proto.injective_derivative_exchange_rpc.SubaccountOrdersListResponse.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    executionType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest;
  return proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExecutionType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest} returns this
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market_id = 2;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest} returns this
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string execution_type = 3;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.prototype.getExecutionType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest} returns this
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.prototype.setExecutionType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string direction = 4;
 * @return {string}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest} returns this
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListRequest.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradesList: jspb.Message.toObjectList(msg.getTradesList(),
    proto.injective_derivative_exchange_rpc.DerivativeTrade.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse;
  return proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_derivative_exchange_rpc.DerivativeTrade;
      reader.readMessage(value,proto.injective_derivative_exchange_rpc.DerivativeTrade.deserializeBinaryFromReader);
      msg.addTrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_derivative_exchange_rpc.DerivativeTrade.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DerivativeTrade trades = 1;
 * @return {!Array<!proto.injective_derivative_exchange_rpc.DerivativeTrade>}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.prototype.getTradesList = function() {
  return /** @type{!Array<!proto.injective_derivative_exchange_rpc.DerivativeTrade>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_derivative_exchange_rpc.DerivativeTrade, 1));
};


/**
 * @param {!Array<!proto.injective_derivative_exchange_rpc.DerivativeTrade>} value
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse} returns this
*/
proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.prototype.setTradesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_derivative_exchange_rpc.DerivativeTrade=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_derivative_exchange_rpc.DerivativeTrade}
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.prototype.addTrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_derivative_exchange_rpc.DerivativeTrade, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse} returns this
 */
proto.injective_derivative_exchange_rpc.SubaccountTradesListResponse.prototype.clearTradesList = function() {
  return this.setTradesList([]);
};


goog.object.extend(exports, proto.injective_derivative_exchange_rpc);
