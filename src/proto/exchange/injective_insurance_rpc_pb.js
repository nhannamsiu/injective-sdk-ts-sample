// source: exchange/injective_insurance_rpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.injective_insurance_rpc.FundsRequest', null, global);
goog.exportSymbol('proto.injective_insurance_rpc.FundsResponse', null, global);
goog.exportSymbol('proto.injective_insurance_rpc.InsuranceFund', null, global);
goog.exportSymbol('proto.injective_insurance_rpc.RedemptionSchedule', null, global);
goog.exportSymbol('proto.injective_insurance_rpc.RedemptionsRequest', null, global);
goog.exportSymbol('proto.injective_insurance_rpc.RedemptionsResponse', null, global);
goog.exportSymbol('proto.injective_insurance_rpc.TokenMeta', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_insurance_rpc.FundsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_insurance_rpc.FundsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_insurance_rpc.FundsRequest.displayName = 'proto.injective_insurance_rpc.FundsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_insurance_rpc.FundsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_insurance_rpc.FundsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_insurance_rpc.FundsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_insurance_rpc.FundsResponse.displayName = 'proto.injective_insurance_rpc.FundsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_insurance_rpc.InsuranceFund = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_insurance_rpc.InsuranceFund, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_insurance_rpc.InsuranceFund.displayName = 'proto.injective_insurance_rpc.InsuranceFund';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_insurance_rpc.TokenMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_insurance_rpc.TokenMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_insurance_rpc.TokenMeta.displayName = 'proto.injective_insurance_rpc.TokenMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_insurance_rpc.RedemptionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_insurance_rpc.RedemptionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_insurance_rpc.RedemptionsRequest.displayName = 'proto.injective_insurance_rpc.RedemptionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_insurance_rpc.RedemptionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_insurance_rpc.RedemptionsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_insurance_rpc.RedemptionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_insurance_rpc.RedemptionsResponse.displayName = 'proto.injective_insurance_rpc.RedemptionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_insurance_rpc.RedemptionSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_insurance_rpc.RedemptionSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_insurance_rpc.RedemptionSchedule.displayName = 'proto.injective_insurance_rpc.RedemptionSchedule';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_insurance_rpc.FundsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_insurance_rpc.FundsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_insurance_rpc.FundsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.FundsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_insurance_rpc.FundsRequest}
 */
proto.injective_insurance_rpc.FundsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_insurance_rpc.FundsRequest;
  return proto.injective_insurance_rpc.FundsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_insurance_rpc.FundsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_insurance_rpc.FundsRequest}
 */
proto.injective_insurance_rpc.FundsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_insurance_rpc.FundsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_insurance_rpc.FundsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_insurance_rpc.FundsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.FundsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_insurance_rpc.FundsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_insurance_rpc.FundsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_insurance_rpc.FundsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_insurance_rpc.FundsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.FundsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fundsList: jspb.Message.toObjectList(msg.getFundsList(),
    proto.injective_insurance_rpc.InsuranceFund.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_insurance_rpc.FundsResponse}
 */
proto.injective_insurance_rpc.FundsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_insurance_rpc.FundsResponse;
  return proto.injective_insurance_rpc.FundsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_insurance_rpc.FundsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_insurance_rpc.FundsResponse}
 */
proto.injective_insurance_rpc.FundsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_insurance_rpc.InsuranceFund;
      reader.readMessage(value,proto.injective_insurance_rpc.InsuranceFund.deserializeBinaryFromReader);
      msg.addFunds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_insurance_rpc.FundsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_insurance_rpc.FundsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_insurance_rpc.FundsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.FundsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFundsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_insurance_rpc.InsuranceFund.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InsuranceFund funds = 1;
 * @return {!Array<!proto.injective_insurance_rpc.InsuranceFund>}
 */
proto.injective_insurance_rpc.FundsResponse.prototype.getFundsList = function() {
  return /** @type{!Array<!proto.injective_insurance_rpc.InsuranceFund>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_insurance_rpc.InsuranceFund, 1));
};


/**
 * @param {!Array<!proto.injective_insurance_rpc.InsuranceFund>} value
 * @return {!proto.injective_insurance_rpc.FundsResponse} returns this
*/
proto.injective_insurance_rpc.FundsResponse.prototype.setFundsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_insurance_rpc.InsuranceFund=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_insurance_rpc.InsuranceFund}
 */
proto.injective_insurance_rpc.FundsResponse.prototype.addFunds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_insurance_rpc.InsuranceFund, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_insurance_rpc.FundsResponse} returns this
 */
proto.injective_insurance_rpc.FundsResponse.prototype.clearFundsList = function() {
  return this.setFundsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_insurance_rpc.InsuranceFund.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_insurance_rpc.InsuranceFund} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.InsuranceFund.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketTicker: jspb.Message.getFieldWithDefault(msg, 1, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    depositDenom: jspb.Message.getFieldWithDefault(msg, 3, ""),
    poolTokenDenom: jspb.Message.getFieldWithDefault(msg, 4, ""),
    redemptionNoticePeriodDuration: jspb.Message.getFieldWithDefault(msg, 5, 0),
    balance: jspb.Message.getFieldWithDefault(msg, 6, ""),
    totalShare: jspb.Message.getFieldWithDefault(msg, 7, ""),
    oracleBase: jspb.Message.getFieldWithDefault(msg, 8, ""),
    oracleQuote: jspb.Message.getFieldWithDefault(msg, 9, ""),
    oracleType: jspb.Message.getFieldWithDefault(msg, 10, ""),
    expiry: jspb.Message.getFieldWithDefault(msg, 11, 0),
    depositTokenMeta: (f = msg.getDepositTokenMeta()) && proto.injective_insurance_rpc.TokenMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_insurance_rpc.InsuranceFund}
 */
proto.injective_insurance_rpc.InsuranceFund.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_insurance_rpc.InsuranceFund;
  return proto.injective_insurance_rpc.InsuranceFund.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_insurance_rpc.InsuranceFund} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_insurance_rpc.InsuranceFund}
 */
proto.injective_insurance_rpc.InsuranceFund.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketTicker(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepositDenom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoolTokenDenom(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setRedemptionNoticePeriodDuration(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalShare(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleBase(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleQuote(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleType(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setExpiry(value);
      break;
    case 12:
      var value = new proto.injective_insurance_rpc.TokenMeta;
      reader.readMessage(value,proto.injective_insurance_rpc.TokenMeta.deserializeBinaryFromReader);
      msg.setDepositTokenMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_insurance_rpc.InsuranceFund.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_insurance_rpc.InsuranceFund} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.InsuranceFund.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketTicker();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDepositDenom();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPoolTokenDenom();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRedemptionNoticePeriodDuration();
  if (f !== 0) {
    writer.writeSint64(
      5,
      f
    );
  }
  f = message.getBalance();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTotalShare();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOracleBase();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOracleQuote();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getOracleType();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getExpiry();
  if (f !== 0) {
    writer.writeSint64(
      11,
      f
    );
  }
  f = message.getDepositTokenMeta();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.injective_insurance_rpc.TokenMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional string market_ticker = 1;
 * @return {string}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.getMarketTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.InsuranceFund} returns this
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.setMarketTicker = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market_id = 2;
 * @return {string}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.InsuranceFund} returns this
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string deposit_denom = 3;
 * @return {string}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.getDepositDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.InsuranceFund} returns this
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.setDepositDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string pool_token_denom = 4;
 * @return {string}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.getPoolTokenDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.InsuranceFund} returns this
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.setPoolTokenDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional sint64 redemption_notice_period_duration = 5;
 * @return {number}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.getRedemptionNoticePeriodDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_insurance_rpc.InsuranceFund} returns this
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.setRedemptionNoticePeriodDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string balance = 6;
 * @return {string}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.InsuranceFund} returns this
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.setBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string total_share = 7;
 * @return {string}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.getTotalShare = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.InsuranceFund} returns this
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.setTotalShare = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string oracle_base = 8;
 * @return {string}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.getOracleBase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.InsuranceFund} returns this
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.setOracleBase = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string oracle_quote = 9;
 * @return {string}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.getOracleQuote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.InsuranceFund} returns this
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.setOracleQuote = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string oracle_type = 10;
 * @return {string}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.getOracleType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.InsuranceFund} returns this
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.setOracleType = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional sint64 expiry = 11;
 * @return {number}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.getExpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_insurance_rpc.InsuranceFund} returns this
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.setExpiry = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional TokenMeta deposit_token_meta = 12;
 * @return {?proto.injective_insurance_rpc.TokenMeta}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.getDepositTokenMeta = function() {
  return /** @type{?proto.injective_insurance_rpc.TokenMeta} */ (
    jspb.Message.getWrapperField(this, proto.injective_insurance_rpc.TokenMeta, 12));
};


/**
 * @param {?proto.injective_insurance_rpc.TokenMeta|undefined} value
 * @return {!proto.injective_insurance_rpc.InsuranceFund} returns this
*/
proto.injective_insurance_rpc.InsuranceFund.prototype.setDepositTokenMeta = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_insurance_rpc.InsuranceFund} returns this
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.clearDepositTokenMeta = function() {
  return this.setDepositTokenMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_insurance_rpc.InsuranceFund.prototype.hasDepositTokenMeta = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_insurance_rpc.TokenMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_insurance_rpc.TokenMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_insurance_rpc.TokenMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.TokenMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    logo: jspb.Message.getFieldWithDefault(msg, 4, ""),
    decimals: jspb.Message.getFieldWithDefault(msg, 5, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_insurance_rpc.TokenMeta}
 */
proto.injective_insurance_rpc.TokenMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_insurance_rpc.TokenMeta;
  return proto.injective_insurance_rpc.TokenMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_insurance_rpc.TokenMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_insurance_rpc.TokenMeta}
 */
proto.injective_insurance_rpc.TokenMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDecimals(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_insurance_rpc.TokenMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_insurance_rpc.TokenMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_insurance_rpc.TokenMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.TokenMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLogo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeSint64(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.injective_insurance_rpc.TokenMeta.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.TokenMeta} returns this
 */
proto.injective_insurance_rpc.TokenMeta.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.injective_insurance_rpc.TokenMeta.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.TokenMeta} returns this
 */
proto.injective_insurance_rpc.TokenMeta.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.injective_insurance_rpc.TokenMeta.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.TokenMeta} returns this
 */
proto.injective_insurance_rpc.TokenMeta.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string logo = 4;
 * @return {string}
 */
proto.injective_insurance_rpc.TokenMeta.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.TokenMeta} returns this
 */
proto.injective_insurance_rpc.TokenMeta.prototype.setLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional sint32 decimals = 5;
 * @return {number}
 */
proto.injective_insurance_rpc.TokenMeta.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_insurance_rpc.TokenMeta} returns this
 */
proto.injective_insurance_rpc.TokenMeta.prototype.setDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint64 updated_at = 6;
 * @return {number}
 */
proto.injective_insurance_rpc.TokenMeta.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_insurance_rpc.TokenMeta} returns this
 */
proto.injective_insurance_rpc.TokenMeta.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_insurance_rpc.RedemptionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_insurance_rpc.RedemptionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_insurance_rpc.RedemptionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.RedemptionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    redeemer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    redemptionDenom: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_insurance_rpc.RedemptionsRequest}
 */
proto.injective_insurance_rpc.RedemptionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_insurance_rpc.RedemptionsRequest;
  return proto.injective_insurance_rpc.RedemptionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_insurance_rpc.RedemptionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_insurance_rpc.RedemptionsRequest}
 */
proto.injective_insurance_rpc.RedemptionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedeemer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedemptionDenom(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_insurance_rpc.RedemptionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_insurance_rpc.RedemptionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_insurance_rpc.RedemptionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.RedemptionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRedeemer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRedemptionDenom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string redeemer = 1;
 * @return {string}
 */
proto.injective_insurance_rpc.RedemptionsRequest.prototype.getRedeemer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.RedemptionsRequest} returns this
 */
proto.injective_insurance_rpc.RedemptionsRequest.prototype.setRedeemer = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string redemption_denom = 2;
 * @return {string}
 */
proto.injective_insurance_rpc.RedemptionsRequest.prototype.getRedemptionDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.RedemptionsRequest} returns this
 */
proto.injective_insurance_rpc.RedemptionsRequest.prototype.setRedemptionDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string status = 3;
 * @return {string}
 */
proto.injective_insurance_rpc.RedemptionsRequest.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.RedemptionsRequest} returns this
 */
proto.injective_insurance_rpc.RedemptionsRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_insurance_rpc.RedemptionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_insurance_rpc.RedemptionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_insurance_rpc.RedemptionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_insurance_rpc.RedemptionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.RedemptionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    redemptionSchedulesList: jspb.Message.toObjectList(msg.getRedemptionSchedulesList(),
    proto.injective_insurance_rpc.RedemptionSchedule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_insurance_rpc.RedemptionsResponse}
 */
proto.injective_insurance_rpc.RedemptionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_insurance_rpc.RedemptionsResponse;
  return proto.injective_insurance_rpc.RedemptionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_insurance_rpc.RedemptionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_insurance_rpc.RedemptionsResponse}
 */
proto.injective_insurance_rpc.RedemptionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_insurance_rpc.RedemptionSchedule;
      reader.readMessage(value,proto.injective_insurance_rpc.RedemptionSchedule.deserializeBinaryFromReader);
      msg.addRedemptionSchedules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_insurance_rpc.RedemptionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_insurance_rpc.RedemptionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_insurance_rpc.RedemptionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.RedemptionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRedemptionSchedulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_insurance_rpc.RedemptionSchedule.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RedemptionSchedule redemption_schedules = 1;
 * @return {!Array<!proto.injective_insurance_rpc.RedemptionSchedule>}
 */
proto.injective_insurance_rpc.RedemptionsResponse.prototype.getRedemptionSchedulesList = function() {
  return /** @type{!Array<!proto.injective_insurance_rpc.RedemptionSchedule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_insurance_rpc.RedemptionSchedule, 1));
};


/**
 * @param {!Array<!proto.injective_insurance_rpc.RedemptionSchedule>} value
 * @return {!proto.injective_insurance_rpc.RedemptionsResponse} returns this
*/
proto.injective_insurance_rpc.RedemptionsResponse.prototype.setRedemptionSchedulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_insurance_rpc.RedemptionSchedule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_insurance_rpc.RedemptionSchedule}
 */
proto.injective_insurance_rpc.RedemptionsResponse.prototype.addRedemptionSchedules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_insurance_rpc.RedemptionSchedule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_insurance_rpc.RedemptionsResponse} returns this
 */
proto.injective_insurance_rpc.RedemptionsResponse.prototype.clearRedemptionSchedulesList = function() {
  return this.setRedemptionSchedulesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_insurance_rpc.RedemptionSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_insurance_rpc.RedemptionSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.RedemptionSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    redemptionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, ""),
    redeemer: jspb.Message.getFieldWithDefault(msg, 3, ""),
    claimableRedemptionTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    redemptionAmount: jspb.Message.getFieldWithDefault(msg, 5, ""),
    redemptionDenom: jspb.Message.getFieldWithDefault(msg, 6, ""),
    requestedAt: jspb.Message.getFieldWithDefault(msg, 7, 0),
    disbursedAmount: jspb.Message.getFieldWithDefault(msg, 8, ""),
    disbursedDenom: jspb.Message.getFieldWithDefault(msg, 9, ""),
    disbursedAt: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_insurance_rpc.RedemptionSchedule}
 */
proto.injective_insurance_rpc.RedemptionSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_insurance_rpc.RedemptionSchedule;
  return proto.injective_insurance_rpc.RedemptionSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_insurance_rpc.RedemptionSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_insurance_rpc.RedemptionSchedule}
 */
proto.injective_insurance_rpc.RedemptionSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRedemptionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedeemer(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setClaimableRedemptionTime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedemptionAmount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedemptionDenom(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setRequestedAt(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisbursedAmount(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisbursedDenom(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setDisbursedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_insurance_rpc.RedemptionSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_insurance_rpc.RedemptionSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_insurance_rpc.RedemptionSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRedemptionId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRedeemer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClaimableRedemptionTime();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
  f = message.getRedemptionAmount();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRedemptionDenom();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRequestedAt();
  if (f !== 0) {
    writer.writeSint64(
      7,
      f
    );
  }
  f = message.getDisbursedAmount();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDisbursedDenom();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDisbursedAt();
  if (f !== 0) {
    writer.writeSint64(
      10,
      f
    );
  }
};


/**
 * optional uint64 redemption_id = 1;
 * @return {number}
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.getRedemptionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_insurance_rpc.RedemptionSchedule} returns this
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.setRedemptionId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.RedemptionSchedule} returns this
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string redeemer = 3;
 * @return {string}
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.getRedeemer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.RedemptionSchedule} returns this
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.setRedeemer = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional sint64 claimable_redemption_time = 4;
 * @return {number}
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.getClaimableRedemptionTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_insurance_rpc.RedemptionSchedule} returns this
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.setClaimableRedemptionTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string redemption_amount = 5;
 * @return {string}
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.getRedemptionAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.RedemptionSchedule} returns this
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.setRedemptionAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string redemption_denom = 6;
 * @return {string}
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.getRedemptionDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.RedemptionSchedule} returns this
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.setRedemptionDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional sint64 requested_at = 7;
 * @return {number}
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.getRequestedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_insurance_rpc.RedemptionSchedule} returns this
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.setRequestedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string disbursed_amount = 8;
 * @return {string}
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.getDisbursedAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.RedemptionSchedule} returns this
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.setDisbursedAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string disbursed_denom = 9;
 * @return {string}
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.getDisbursedDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_insurance_rpc.RedemptionSchedule} returns this
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.setDisbursedDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional sint64 disbursed_at = 10;
 * @return {number}
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.getDisbursedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_insurance_rpc.RedemptionSchedule} returns this
 */
proto.injective_insurance_rpc.RedemptionSchedule.prototype.setDisbursedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


goog.object.extend(exports, proto.injective_insurance_rpc);
