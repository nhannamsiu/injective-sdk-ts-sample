// source: exchange/injective_explorer_rpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.injective_explorer_rpc.Balance', null, global);
goog.exportSymbol('proto.injective_explorer_rpc.BlockData', null, global);
goog.exportSymbol('proto.injective_explorer_rpc.Event', null, global);
goog.exportSymbol('proto.injective_explorer_rpc.GetAccountRequest', null, global);
goog.exportSymbol('proto.injective_explorer_rpc.GetAccountResponse', null, global);
goog.exportSymbol('proto.injective_explorer_rpc.GetAccountTxsRequest', null, global);
goog.exportSymbol('proto.injective_explorer_rpc.GetAccountTxsResponse', null, global);
goog.exportSymbol('proto.injective_explorer_rpc.StreamBlocksRequest', null, global);
goog.exportSymbol('proto.injective_explorer_rpc.StreamBlocksResponse', null, global);
goog.exportSymbol('proto.injective_explorer_rpc.StreamTxsRequest', null, global);
goog.exportSymbol('proto.injective_explorer_rpc.StreamTxsResponse', null, global);
goog.exportSymbol('proto.injective_explorer_rpc.TxData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_explorer_rpc.GetAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_explorer_rpc.GetAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_explorer_rpc.GetAccountRequest.displayName = 'proto.injective_explorer_rpc.GetAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_explorer_rpc.GetAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_explorer_rpc.GetAccountResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_explorer_rpc.GetAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_explorer_rpc.GetAccountResponse.displayName = 'proto.injective_explorer_rpc.GetAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_explorer_rpc.Balance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_explorer_rpc.Balance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_explorer_rpc.Balance.displayName = 'proto.injective_explorer_rpc.Balance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_explorer_rpc.GetAccountTxsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_explorer_rpc.GetAccountTxsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_explorer_rpc.GetAccountTxsRequest.displayName = 'proto.injective_explorer_rpc.GetAccountTxsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_explorer_rpc.GetAccountTxsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_explorer_rpc.GetAccountTxsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_explorer_rpc.GetAccountTxsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_explorer_rpc.GetAccountTxsResponse.displayName = 'proto.injective_explorer_rpc.GetAccountTxsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_explorer_rpc.TxData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_explorer_rpc.TxData.repeatedFields_, null);
};
goog.inherits(proto.injective_explorer_rpc.TxData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_explorer_rpc.TxData.displayName = 'proto.injective_explorer_rpc.TxData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_explorer_rpc.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_explorer_rpc.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_explorer_rpc.Event.displayName = 'proto.injective_explorer_rpc.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_explorer_rpc.StreamTxsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_explorer_rpc.StreamTxsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_explorer_rpc.StreamTxsRequest.displayName = 'proto.injective_explorer_rpc.StreamTxsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_explorer_rpc.StreamTxsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_explorer_rpc.StreamTxsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_explorer_rpc.StreamTxsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_explorer_rpc.StreamTxsResponse.displayName = 'proto.injective_explorer_rpc.StreamTxsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_explorer_rpc.StreamBlocksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_explorer_rpc.StreamBlocksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_explorer_rpc.StreamBlocksRequest.displayName = 'proto.injective_explorer_rpc.StreamBlocksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_explorer_rpc.StreamBlocksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_explorer_rpc.StreamBlocksResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_explorer_rpc.StreamBlocksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_explorer_rpc.StreamBlocksResponse.displayName = 'proto.injective_explorer_rpc.StreamBlocksResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_explorer_rpc.BlockData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_explorer_rpc.BlockData.repeatedFields_, null);
};
goog.inherits(proto.injective_explorer_rpc.BlockData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_explorer_rpc.BlockData.displayName = 'proto.injective_explorer_rpc.BlockData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_explorer_rpc.GetAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_explorer_rpc.GetAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_explorer_rpc.GetAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.GetAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_explorer_rpc.GetAccountRequest}
 */
proto.injective_explorer_rpc.GetAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_explorer_rpc.GetAccountRequest;
  return proto.injective_explorer_rpc.GetAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_explorer_rpc.GetAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_explorer_rpc.GetAccountRequest}
 */
proto.injective_explorer_rpc.GetAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.GetAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_explorer_rpc.GetAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_explorer_rpc.GetAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.GetAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.injective_explorer_rpc.GetAccountRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.GetAccountRequest} returns this
 */
proto.injective_explorer_rpc.GetAccountRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_explorer_rpc.GetAccountResponse.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_explorer_rpc.GetAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_explorer_rpc.GetAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.GetAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    publicKey: msg.getPublicKey_asB64(),
    accountNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 4, 0),
    flags: jspb.Message.getFieldWithDefault(msg, 5, 0),
    balancesList: jspb.Message.toObjectList(msg.getBalancesList(),
    proto.injective_explorer_rpc.Balance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_explorer_rpc.GetAccountResponse}
 */
proto.injective_explorer_rpc.GetAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_explorer_rpc.GetAccountResponse;
  return proto.injective_explorer_rpc.GetAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_explorer_rpc.GetAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_explorer_rpc.GetAccountResponse}
 */
proto.injective_explorer_rpc.GetAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAccountNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setSequence(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFlags(value);
      break;
    case 6:
      var value = new proto.injective_explorer_rpc.Balance;
      reader.readMessage(value,proto.injective_explorer_rpc.Balance.deserializeBinaryFromReader);
      msg.addBalances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_explorer_rpc.GetAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_explorer_rpc.GetAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.GetAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAccountNumber();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.injective_explorer_rpc.Balance.serializeBinaryToWriter
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.GetAccountResponse} returns this
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes public_key = 2;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective_explorer_rpc.GetAccountResponse} returns this
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional sint64 account_number = 3;
 * @return {number}
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.getAccountNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.GetAccountResponse} returns this
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.setAccountNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sint64 sequence = 4;
 * @return {number}
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.GetAccountResponse} returns this
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 flags = 5;
 * @return {number}
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.GetAccountResponse} returns this
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Balance balances = 6;
 * @return {!Array<!proto.injective_explorer_rpc.Balance>}
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.getBalancesList = function() {
  return /** @type{!Array<!proto.injective_explorer_rpc.Balance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_explorer_rpc.Balance, 6));
};


/**
 * @param {!Array<!proto.injective_explorer_rpc.Balance>} value
 * @return {!proto.injective_explorer_rpc.GetAccountResponse} returns this
*/
proto.injective_explorer_rpc.GetAccountResponse.prototype.setBalancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.injective_explorer_rpc.Balance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_explorer_rpc.Balance}
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.addBalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.injective_explorer_rpc.Balance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_explorer_rpc.GetAccountResponse} returns this
 */
proto.injective_explorer_rpc.GetAccountResponse.prototype.clearBalancesList = function() {
  return this.setBalancesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_explorer_rpc.Balance.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_explorer_rpc.Balance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_explorer_rpc.Balance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.Balance.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    free: jspb.Message.getFieldWithDefault(msg, 2, ""),
    locked: jspb.Message.getFieldWithDefault(msg, 3, ""),
    frozen: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_explorer_rpc.Balance}
 */
proto.injective_explorer_rpc.Balance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_explorer_rpc.Balance;
  return proto.injective_explorer_rpc.Balance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_explorer_rpc.Balance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_explorer_rpc.Balance}
 */
proto.injective_explorer_rpc.Balance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFree(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocked(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrozen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.Balance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_explorer_rpc.Balance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_explorer_rpc.Balance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.Balance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFree();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocked();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFrozen();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.injective_explorer_rpc.Balance.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.Balance} returns this
 */
proto.injective_explorer_rpc.Balance.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string free = 2;
 * @return {string}
 */
proto.injective_explorer_rpc.Balance.prototype.getFree = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.Balance} returns this
 */
proto.injective_explorer_rpc.Balance.prototype.setFree = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string locked = 3;
 * @return {string}
 */
proto.injective_explorer_rpc.Balance.prototype.getLocked = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.Balance} returns this
 */
proto.injective_explorer_rpc.Balance.prototype.setLocked = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string frozen = 4;
 * @return {string}
 */
proto.injective_explorer_rpc.Balance.prototype.getFrozen = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.Balance} returns this
 */
proto.injective_explorer_rpc.Balance.prototype.setFrozen = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_explorer_rpc.GetAccountTxsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_explorer_rpc.GetAccountTxsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_explorer_rpc.GetAccountTxsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.GetAccountTxsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_explorer_rpc.GetAccountTxsRequest}
 */
proto.injective_explorer_rpc.GetAccountTxsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_explorer_rpc.GetAccountTxsRequest;
  return proto.injective_explorer_rpc.GetAccountTxsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_explorer_rpc.GetAccountTxsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_explorer_rpc.GetAccountTxsRequest}
 */
proto.injective_explorer_rpc.GetAccountTxsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.GetAccountTxsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_explorer_rpc.GetAccountTxsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_explorer_rpc.GetAccountTxsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.GetAccountTxsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.injective_explorer_rpc.GetAccountTxsRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.GetAccountTxsRequest} returns this
 */
proto.injective_explorer_rpc.GetAccountTxsRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional sint32 limit = 2;
 * @return {number}
 */
proto.injective_explorer_rpc.GetAccountTxsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.GetAccountTxsRequest} returns this
 */
proto.injective_explorer_rpc.GetAccountTxsRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_explorer_rpc.GetAccountTxsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_explorer_rpc.GetAccountTxsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_explorer_rpc.GetAccountTxsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_explorer_rpc.GetAccountTxsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.GetAccountTxsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldList: jspb.Message.toObjectList(msg.getFieldList(),
    proto.injective_explorer_rpc.TxData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_explorer_rpc.GetAccountTxsResponse}
 */
proto.injective_explorer_rpc.GetAccountTxsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_explorer_rpc.GetAccountTxsResponse;
  return proto.injective_explorer_rpc.GetAccountTxsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_explorer_rpc.GetAccountTxsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_explorer_rpc.GetAccountTxsResponse}
 */
proto.injective_explorer_rpc.GetAccountTxsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_explorer_rpc.TxData;
      reader.readMessage(value,proto.injective_explorer_rpc.TxData.deserializeBinaryFromReader);
      msg.addField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.GetAccountTxsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_explorer_rpc.GetAccountTxsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_explorer_rpc.GetAccountTxsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.GetAccountTxsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_explorer_rpc.TxData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TxData field = 1;
 * @return {!Array<!proto.injective_explorer_rpc.TxData>}
 */
proto.injective_explorer_rpc.GetAccountTxsResponse.prototype.getFieldList = function() {
  return /** @type{!Array<!proto.injective_explorer_rpc.TxData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_explorer_rpc.TxData, 1));
};


/**
 * @param {!Array<!proto.injective_explorer_rpc.TxData>} value
 * @return {!proto.injective_explorer_rpc.GetAccountTxsResponse} returns this
*/
proto.injective_explorer_rpc.GetAccountTxsResponse.prototype.setFieldList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_explorer_rpc.TxData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_explorer_rpc.TxData}
 */
proto.injective_explorer_rpc.GetAccountTxsResponse.prototype.addField = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_explorer_rpc.TxData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_explorer_rpc.GetAccountTxsResponse} returns this
 */
proto.injective_explorer_rpc.GetAccountTxsResponse.prototype.clearFieldList = function() {
  return this.setFieldList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_explorer_rpc.TxData.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_explorer_rpc.TxData.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_explorer_rpc.TxData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_explorer_rpc.TxData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.TxData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blockTimestamp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 4, ""),
    code: jspb.Message.getFieldWithDefault(msg, 5, 0),
    data: msg.getData_asB64(),
    info: jspb.Message.getFieldWithDefault(msg, 8, ""),
    gasWanted: jspb.Message.getFieldWithDefault(msg, 9, 0),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 10, 0),
    codespace: jspb.Message.getFieldWithDefault(msg, 11, ""),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.injective_explorer_rpc.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_explorer_rpc.TxData}
 */
proto.injective_explorer_rpc.TxData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_explorer_rpc.TxData;
  return proto.injective_explorer_rpc.TxData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_explorer_rpc.TxData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_explorer_rpc.TxData}
 */
proto.injective_explorer_rpc.TxData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setGasWanted(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setGasUsed(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodespace(value);
      break;
    case 12:
      var value = new proto.injective_explorer_rpc.Event;
      reader.readMessage(value,proto.injective_explorer_rpc.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.TxData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_explorer_rpc.TxData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_explorer_rpc.TxData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.TxData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockNumber();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBlockTimestamp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getGasWanted();
  if (f !== 0) {
    writer.writeSint64(
      9,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeSint64(
      10,
      f
    );
  }
  f = message.getCodespace();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.injective_explorer_rpc.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.injective_explorer_rpc.TxData.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.TxData} returns this
 */
proto.injective_explorer_rpc.TxData.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 block_number = 2;
 * @return {number}
 */
proto.injective_explorer_rpc.TxData.prototype.getBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.TxData} returns this
 */
proto.injective_explorer_rpc.TxData.prototype.setBlockNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string block_timestamp = 3;
 * @return {string}
 */
proto.injective_explorer_rpc.TxData.prototype.getBlockTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.TxData} returns this
 */
proto.injective_explorer_rpc.TxData.prototype.setBlockTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string hash = 4;
 * @return {string}
 */
proto.injective_explorer_rpc.TxData.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.TxData} returns this
 */
proto.injective_explorer_rpc.TxData.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 code = 5;
 * @return {number}
 */
proto.injective_explorer_rpc.TxData.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.TxData} returns this
 */
proto.injective_explorer_rpc.TxData.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.injective_explorer_rpc.TxData.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.injective_explorer_rpc.TxData.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.TxData.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective_explorer_rpc.TxData} returns this
 */
proto.injective_explorer_rpc.TxData.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string info = 8;
 * @return {string}
 */
proto.injective_explorer_rpc.TxData.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.TxData} returns this
 */
proto.injective_explorer_rpc.TxData.prototype.setInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional sint64 gas_wanted = 9;
 * @return {number}
 */
proto.injective_explorer_rpc.TxData.prototype.getGasWanted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.TxData} returns this
 */
proto.injective_explorer_rpc.TxData.prototype.setGasWanted = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional sint64 gas_used = 10;
 * @return {number}
 */
proto.injective_explorer_rpc.TxData.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.TxData} returns this
 */
proto.injective_explorer_rpc.TxData.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string codespace = 11;
 * @return {string}
 */
proto.injective_explorer_rpc.TxData.prototype.getCodespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.TxData} returns this
 */
proto.injective_explorer_rpc.TxData.prototype.setCodespace = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * repeated Event events = 12;
 * @return {!Array<!proto.injective_explorer_rpc.Event>}
 */
proto.injective_explorer_rpc.TxData.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.injective_explorer_rpc.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_explorer_rpc.Event, 12));
};


/**
 * @param {!Array<!proto.injective_explorer_rpc.Event>} value
 * @return {!proto.injective_explorer_rpc.TxData} returns this
*/
proto.injective_explorer_rpc.TxData.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.injective_explorer_rpc.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_explorer_rpc.Event}
 */
proto.injective_explorer_rpc.TxData.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.injective_explorer_rpc.Event, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_explorer_rpc.TxData} returns this
 */
proto.injective_explorer_rpc.TxData.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_explorer_rpc.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_explorer_rpc.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_explorer_rpc.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_explorer_rpc.Event}
 */
proto.injective_explorer_rpc.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_explorer_rpc.Event;
  return proto.injective_explorer_rpc.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_explorer_rpc.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_explorer_rpc.Event}
 */
proto.injective_explorer_rpc.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_explorer_rpc.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_explorer_rpc.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.injective_explorer_rpc.Event.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.Event} returns this
 */
proto.injective_explorer_rpc.Event.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> attributes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.injective_explorer_rpc.Event.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.injective_explorer_rpc.Event} returns this
 */
proto.injective_explorer_rpc.Event.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_explorer_rpc.StreamTxsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_explorer_rpc.StreamTxsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_explorer_rpc.StreamTxsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.StreamTxsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    before: jspb.Message.getFieldWithDefault(msg, 1, 0),
    after: jspb.Message.getFieldWithDefault(msg, 2, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_explorer_rpc.StreamTxsRequest}
 */
proto.injective_explorer_rpc.StreamTxsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_explorer_rpc.StreamTxsRequest;
  return proto.injective_explorer_rpc.StreamTxsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_explorer_rpc.StreamTxsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_explorer_rpc.StreamTxsRequest}
 */
proto.injective_explorer_rpc.StreamTxsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBefore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAfter(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.StreamTxsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_explorer_rpc.StreamTxsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_explorer_rpc.StreamTxsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.StreamTxsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBefore();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAfter();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeSint32(
      3,
      f
    );
  }
};


/**
 * optional uint64 before = 1;
 * @return {number}
 */
proto.injective_explorer_rpc.StreamTxsRequest.prototype.getBefore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.StreamTxsRequest} returns this
 */
proto.injective_explorer_rpc.StreamTxsRequest.prototype.setBefore = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 after = 2;
 * @return {number}
 */
proto.injective_explorer_rpc.StreamTxsRequest.prototype.getAfter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.StreamTxsRequest} returns this
 */
proto.injective_explorer_rpc.StreamTxsRequest.prototype.setAfter = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional sint32 limit = 3;
 * @return {number}
 */
proto.injective_explorer_rpc.StreamTxsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.StreamTxsRequest} returns this
 */
proto.injective_explorer_rpc.StreamTxsRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_explorer_rpc.StreamTxsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_explorer_rpc.StreamTxsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_explorer_rpc.StreamTxsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_explorer_rpc.StreamTxsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.StreamTxsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldList: jspb.Message.toObjectList(msg.getFieldList(),
    proto.injective_explorer_rpc.TxData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_explorer_rpc.StreamTxsResponse}
 */
proto.injective_explorer_rpc.StreamTxsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_explorer_rpc.StreamTxsResponse;
  return proto.injective_explorer_rpc.StreamTxsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_explorer_rpc.StreamTxsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_explorer_rpc.StreamTxsResponse}
 */
proto.injective_explorer_rpc.StreamTxsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_explorer_rpc.TxData;
      reader.readMessage(value,proto.injective_explorer_rpc.TxData.deserializeBinaryFromReader);
      msg.addField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.StreamTxsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_explorer_rpc.StreamTxsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_explorer_rpc.StreamTxsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.StreamTxsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_explorer_rpc.TxData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TxData field = 1;
 * @return {!Array<!proto.injective_explorer_rpc.TxData>}
 */
proto.injective_explorer_rpc.StreamTxsResponse.prototype.getFieldList = function() {
  return /** @type{!Array<!proto.injective_explorer_rpc.TxData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_explorer_rpc.TxData, 1));
};


/**
 * @param {!Array<!proto.injective_explorer_rpc.TxData>} value
 * @return {!proto.injective_explorer_rpc.StreamTxsResponse} returns this
*/
proto.injective_explorer_rpc.StreamTxsResponse.prototype.setFieldList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_explorer_rpc.TxData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_explorer_rpc.TxData}
 */
proto.injective_explorer_rpc.StreamTxsResponse.prototype.addField = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_explorer_rpc.TxData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_explorer_rpc.StreamTxsResponse} returns this
 */
proto.injective_explorer_rpc.StreamTxsResponse.prototype.clearFieldList = function() {
  return this.setFieldList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_explorer_rpc.StreamBlocksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_explorer_rpc.StreamBlocksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_explorer_rpc.StreamBlocksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.StreamBlocksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    before: jspb.Message.getFieldWithDefault(msg, 1, 0),
    after: jspb.Message.getFieldWithDefault(msg, 2, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_explorer_rpc.StreamBlocksRequest}
 */
proto.injective_explorer_rpc.StreamBlocksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_explorer_rpc.StreamBlocksRequest;
  return proto.injective_explorer_rpc.StreamBlocksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_explorer_rpc.StreamBlocksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_explorer_rpc.StreamBlocksRequest}
 */
proto.injective_explorer_rpc.StreamBlocksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBefore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAfter(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.StreamBlocksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_explorer_rpc.StreamBlocksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_explorer_rpc.StreamBlocksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.StreamBlocksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBefore();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAfter();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeSint32(
      3,
      f
    );
  }
};


/**
 * optional uint64 before = 1;
 * @return {number}
 */
proto.injective_explorer_rpc.StreamBlocksRequest.prototype.getBefore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.StreamBlocksRequest} returns this
 */
proto.injective_explorer_rpc.StreamBlocksRequest.prototype.setBefore = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 after = 2;
 * @return {number}
 */
proto.injective_explorer_rpc.StreamBlocksRequest.prototype.getAfter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.StreamBlocksRequest} returns this
 */
proto.injective_explorer_rpc.StreamBlocksRequest.prototype.setAfter = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional sint32 limit = 3;
 * @return {number}
 */
proto.injective_explorer_rpc.StreamBlocksRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.StreamBlocksRequest} returns this
 */
proto.injective_explorer_rpc.StreamBlocksRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_explorer_rpc.StreamBlocksResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_explorer_rpc.StreamBlocksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_explorer_rpc.StreamBlocksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_explorer_rpc.StreamBlocksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.StreamBlocksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldList: jspb.Message.toObjectList(msg.getFieldList(),
    proto.injective_explorer_rpc.BlockData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_explorer_rpc.StreamBlocksResponse}
 */
proto.injective_explorer_rpc.StreamBlocksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_explorer_rpc.StreamBlocksResponse;
  return proto.injective_explorer_rpc.StreamBlocksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_explorer_rpc.StreamBlocksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_explorer_rpc.StreamBlocksResponse}
 */
proto.injective_explorer_rpc.StreamBlocksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_explorer_rpc.BlockData;
      reader.readMessage(value,proto.injective_explorer_rpc.BlockData.deserializeBinaryFromReader);
      msg.addField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.StreamBlocksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_explorer_rpc.StreamBlocksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_explorer_rpc.StreamBlocksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.StreamBlocksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_explorer_rpc.BlockData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BlockData field = 1;
 * @return {!Array<!proto.injective_explorer_rpc.BlockData>}
 */
proto.injective_explorer_rpc.StreamBlocksResponse.prototype.getFieldList = function() {
  return /** @type{!Array<!proto.injective_explorer_rpc.BlockData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_explorer_rpc.BlockData, 1));
};


/**
 * @param {!Array<!proto.injective_explorer_rpc.BlockData>} value
 * @return {!proto.injective_explorer_rpc.StreamBlocksResponse} returns this
*/
proto.injective_explorer_rpc.StreamBlocksResponse.prototype.setFieldList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_explorer_rpc.BlockData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_explorer_rpc.BlockData}
 */
proto.injective_explorer_rpc.StreamBlocksResponse.prototype.addField = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_explorer_rpc.BlockData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_explorer_rpc.StreamBlocksResponse} returns this
 */
proto.injective_explorer_rpc.StreamBlocksResponse.prototype.clearFieldList = function() {
  return this.setFieldList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_explorer_rpc.BlockData.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_explorer_rpc.BlockData.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_explorer_rpc.BlockData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_explorer_rpc.BlockData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.BlockData.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    proposer: jspb.Message.getFieldWithDefault(msg, 2, ""),
    moniker: jspb.Message.getFieldWithDefault(msg, 3, ""),
    blockHash: jspb.Message.getFieldWithDefault(msg, 4, ""),
    parentHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    numPreCommits: jspb.Message.getFieldWithDefault(msg, 6, 0),
    numTxs: jspb.Message.getFieldWithDefault(msg, 7, 0),
    totalTxs: jspb.Message.getFieldWithDefault(msg, 8, 0),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.injective_explorer_rpc.TxData.toObject, includeInstance),
    timestamp: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_explorer_rpc.BlockData}
 */
proto.injective_explorer_rpc.BlockData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_explorer_rpc.BlockData;
  return proto.injective_explorer_rpc.BlockData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_explorer_rpc.BlockData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_explorer_rpc.BlockData}
 */
proto.injective_explorer_rpc.BlockData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMoniker(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentHash(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setNumPreCommits(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setNumTxs(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTotalTxs(value);
      break;
    case 9:
      var value = new proto.injective_explorer_rpc.TxData;
      reader.readMessage(value,proto.injective_explorer_rpc.TxData.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_explorer_rpc.BlockData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_explorer_rpc.BlockData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_explorer_rpc.BlockData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_explorer_rpc.BlockData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getProposer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParentHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNumPreCommits();
  if (f !== 0) {
    writer.writeSint64(
      6,
      f
    );
  }
  f = message.getNumTxs();
  if (f !== 0) {
    writer.writeSint64(
      7,
      f
    );
  }
  f = message.getTotalTxs();
  if (f !== 0) {
    writer.writeSint64(
      8,
      f
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.injective_explorer_rpc.TxData.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.injective_explorer_rpc.BlockData.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.BlockData} returns this
 */
proto.injective_explorer_rpc.BlockData.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string proposer = 2;
 * @return {string}
 */
proto.injective_explorer_rpc.BlockData.prototype.getProposer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.BlockData} returns this
 */
proto.injective_explorer_rpc.BlockData.prototype.setProposer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string moniker = 3;
 * @return {string}
 */
proto.injective_explorer_rpc.BlockData.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.BlockData} returns this
 */
proto.injective_explorer_rpc.BlockData.prototype.setMoniker = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string block_hash = 4;
 * @return {string}
 */
proto.injective_explorer_rpc.BlockData.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.BlockData} returns this
 */
proto.injective_explorer_rpc.BlockData.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string parent_hash = 5;
 * @return {string}
 */
proto.injective_explorer_rpc.BlockData.prototype.getParentHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.BlockData} returns this
 */
proto.injective_explorer_rpc.BlockData.prototype.setParentHash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional sint64 num_pre_commits = 6;
 * @return {number}
 */
proto.injective_explorer_rpc.BlockData.prototype.getNumPreCommits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.BlockData} returns this
 */
proto.injective_explorer_rpc.BlockData.prototype.setNumPreCommits = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional sint64 num_txs = 7;
 * @return {number}
 */
proto.injective_explorer_rpc.BlockData.prototype.getNumTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.BlockData} returns this
 */
proto.injective_explorer_rpc.BlockData.prototype.setNumTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional sint64 total_txs = 8;
 * @return {number}
 */
proto.injective_explorer_rpc.BlockData.prototype.getTotalTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_explorer_rpc.BlockData} returns this
 */
proto.injective_explorer_rpc.BlockData.prototype.setTotalTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated TxData txs = 9;
 * @return {!Array<!proto.injective_explorer_rpc.TxData>}
 */
proto.injective_explorer_rpc.BlockData.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.injective_explorer_rpc.TxData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_explorer_rpc.TxData, 9));
};


/**
 * @param {!Array<!proto.injective_explorer_rpc.TxData>} value
 * @return {!proto.injective_explorer_rpc.BlockData} returns this
*/
proto.injective_explorer_rpc.BlockData.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.injective_explorer_rpc.TxData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_explorer_rpc.TxData}
 */
proto.injective_explorer_rpc.BlockData.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.injective_explorer_rpc.TxData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_explorer_rpc.BlockData} returns this
 */
proto.injective_explorer_rpc.BlockData.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};


/**
 * optional string timestamp = 10;
 * @return {string}
 */
proto.injective_explorer_rpc.BlockData.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_explorer_rpc.BlockData} returns this
 */
proto.injective_explorer_rpc.BlockData.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


goog.object.extend(exports, proto.injective_explorer_rpc);
